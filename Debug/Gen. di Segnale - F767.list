
Gen. di Segnale - F767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  0002039c  2**0
                  CONTENTS
  4 .ARM          00000008  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007258  08007258  0002039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08007260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000025c  080074bc  0002025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002fc  0800755c  000202fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000770  2000039c  080075fc  0002039c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b0c  080075fc  00020b0c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a5f9  00000000  00000000  000203ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003685  00000000  00000000  0003a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001480  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012f8  00000000  00000000  0003f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bc64  00000000  00000000  000407c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a006  00000000  00000000  0006c424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001076bd  00000000  00000000  0008642a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018dae7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d9c  00000000  00000000  0018db38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000039c 	.word	0x2000039c
 800021c:	00000000 	.word	0x00000000
 8000220:	080070a0 	.word	0x080070a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003a0 	.word	0x200003a0
 800023c:	080070a0 	.word	0x080070a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_DAC_Init+0x60>)
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <MX_DAC_Init+0x64>)
 80005f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_DAC_Init+0x60>)
 80005fa:	f001 fac0 	bl	8001b7e <HAL_DAC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000604:	f000 fd4a 	bl	800109c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_DAC_Init+0x60>)
 8000618:	f001 fb4a 	bl	8001cb0 <HAL_DAC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000622:	f000 fd3b 	bl	800109c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2210      	movs	r2, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_DAC_Init+0x60>)
 800062e:	f001 fb3f 	bl	8001cb0 <HAL_DAC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000638:	f000 fd30 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200003b8 	.word	0x200003b8
 8000648:	40007400 	.word	0x40007400

0800064c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <HAL_DAC_MspInit+0x74>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d123      	bne.n	80006b6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 8000674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_DAC_MspInit+0x78>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_Output_Pin|DAC2_Output_Pin;
 800069e:	2330      	movs	r3, #48	; 0x30
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_DAC_MspInit+0x7c>)
 80006b2:	f001 fe73 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	; 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40007400 	.word	0x40007400
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000

080006cc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ETH_Init+0x84>)
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <MX_ETH_Init+0x88>)
 80006d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ETH_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ETH_Init+0x8c>)
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ETH_Init+0x8c>)
 80006e4:	22e1      	movs	r2, #225	; 0xe1
 80006e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ETH_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ETH_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_ETH_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_ETH_Init+0x84>)
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <MX_ETH_Init+0x8c>)
 80006fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_ETH_Init+0x84>)
 8000702:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000706:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ETH_Init+0x84>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <MX_ETH_Init+0x90>)
 800070c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_ETH_Init+0x84>)
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_ETH_Init+0x94>)
 8000712:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_ETH_Init+0x84>)
 8000716:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800071a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_ETH_Init+0x84>)
 800071e:	f001 fb17 	bl	8001d50 <HAL_ETH_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 fcb8 	bl	800109c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	2100      	movs	r1, #0
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_ETH_Init+0x98>)
 8000732:	f005 fca9 	bl	8006088 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_ETH_Init+0x98>)
 8000738:	2221      	movs	r2, #33	; 0x21
 800073a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_ETH_Init+0x98>)
 800073e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000742:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_ETH_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000404 	.word	0x20000404
 8000754:	40028000 	.word	0x40028000
 8000758:	200004b4 	.word	0x200004b4
 800075c:	200002fc 	.word	0x200002fc
 8000760:	2000025c 	.word	0x2000025c
 8000764:	200003cc 	.word	0x200003cc

08000768 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a4e      	ldr	r2, [pc, #312]	; (80008c0 <HAL_ETH_MspInit+0x158>)
 8000786:	4293      	cmp	r3, r2
 8000788:	f040 8096 	bne.w	80008b8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800078c:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
 8000798:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a0:	623b      	str	r3, [r7, #32]
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	4a46      	ldr	r2, [pc, #280]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ae:	6313      	str	r3, [r2, #48]	; 0x30
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a40      	ldr	r2, [pc, #256]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a3a      	ldr	r2, [pc, #232]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
 80007e0:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <HAL_ETH_MspInit+0x15c>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <HAL_ETH_MspInit+0x160>)
 8000850:	f001 fda4 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000854:	2386      	movs	r3, #134	; 0x86
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <HAL_ETH_MspInit+0x164>)
 8000870:	f001 fd94 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000886:	230b      	movs	r3, #11
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <HAL_ETH_MspInit+0x168>)
 8000892:	f001 fd83 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000896:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <HAL_ETH_MspInit+0x16c>)
 80008b4:	f001 fd72 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	; 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40028000 	.word	0x40028000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40021800 	.word	0x40021800

080008d8 <PlayStep>:
	.next_step=1,
	.cont=END_PHASE}}
};


void PlayStep(uint8_t fase, uint8_t *step_fase, uint8_t *nextStep){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	73fb      	strb	r3, [r7, #15]

	//printf("PlayStep: step=%u\r\n", *step_fase);

	if(Fase[fase][*step_fase].cont==END_PHASE){
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	4958      	ldr	r1, [pc, #352]	; (8000a50 <PlayStep+0x178>)
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	4403      	add	r3, r0
 80008f8:	011b      	lsls	r3, r3, #4
 80008fa:	440b      	add	r3, r1
 80008fc:	330d      	adds	r3, #13
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <PlayStep+0x3e>
		printf("-Fase%u ENDPHASE\r\n\n", fase);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	4619      	mov	r1, r3
 8000908:	4852      	ldr	r0, [pc, #328]	; (8000a54 <PlayStep+0x17c>)
 800090a:	f005 fbc5 	bl	8006098 <iprintf>
		//*nextStep=Fase[fase][*step_fase].next_step;
		*nextStep=1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
		return;
 8000914:	e08f      	b.n	8000a36 <PlayStep+0x15e>
	}


	// SIG1 con DAC1
	uint32_t val1 = (uint32_t)(Fase[fase][*step_fase].dac_signal[0]*4096)/3.3;
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	494c      	ldr	r1, [pc, #304]	; (8000a50 <PlayStep+0x178>)
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	4403      	add	r3, r0
 8000928:	011b      	lsls	r3, r3, #4
 800092a:	440b      	add	r3, r1
 800092c:	edd3 7a00 	vldr	s15, [r3]
 8000930:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000a58 <PlayStep+0x180>
 8000934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000940:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8000a40 <PlayStep+0x168>
 8000944:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000948:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800094c:	ee17 3a90 	vmov	r3, s15
 8000950:	61fb      	str	r3, [r7, #28]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val1);
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	4840      	ldr	r0, [pc, #256]	; (8000a5c <PlayStep+0x184>)
 800095a:	f001 f984 	bl	8001c66 <HAL_DAC_SetValue>

	// SIG2 con DAC2
	uint32_t val2 = (uint32_t)(Fase[fase][*step_fase].dac_signal[1]*4096)/3.3;
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	493a      	ldr	r1, [pc, #232]	; (8000a50 <PlayStep+0x178>)
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	4403      	add	r3, r0
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	440b      	add	r3, r1
 8000974:	3304      	adds	r3, #4
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000a58 <PlayStep+0x180>
 800097e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000986:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800098a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8000a40 <PlayStep+0x168>
 800098e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000992:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000996:	ee17 3a90 	vmov	r3, s15
 800099a:	61bb      	str	r3, [r7, #24]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, val2);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2200      	movs	r2, #0
 80009a0:	2110      	movs	r1, #16
 80009a2:	482e      	ldr	r0, [pc, #184]	; (8000a5c <PlayStep+0x184>)
 80009a4:	f001 f95f 	bl	8001c66 <HAL_DAC_SetValue>

	// SIG3 con PWM
	uint16_t val3 = (((Fase[fase][*step_fase].dac_signal[2])/3.3) * 1023);
 80009a8:	7bfa      	ldrb	r2, [r7, #15]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	4927      	ldr	r1, [pc, #156]	; (8000a50 <PlayStep+0x178>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	4403      	add	r3, r0
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	440b      	add	r3, r1
 80009be:	3308      	adds	r3, #8
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009c8:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8000a40 <PlayStep+0x168>
 80009cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009d0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000a48 <PlayStep+0x170>
 80009d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009dc:	ee17 3a90 	vmov	r3, s15
 80009e0:	82fb      	strh	r3, [r7, #22]
	TIM1->CCR1 = val3;
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <PlayStep+0x188>)
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	6353      	str	r3, [r2, #52]	; 0x34

	printf("gensignal.c  next_step=%d\r\n\n", Fase[fase][*step_fase].next_step);
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	4917      	ldr	r1, [pc, #92]	; (8000a50 <PlayStep+0x178>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	4403      	add	r3, r0
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	440b      	add	r3, r1
 80009fe:	330c      	adds	r3, #12
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4817      	ldr	r0, [pc, #92]	; (8000a64 <PlayStep+0x18c>)
 8000a06:	f005 fb47 	bl	8006098 <iprintf>
	*nextStep=Fase[fase][*step_fase].next_step;
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	490f      	ldr	r1, [pc, #60]	; (8000a50 <PlayStep+0x178>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	4403      	add	r3, r0
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	440b      	add	r3, r1
 8000a20:	330c      	adds	r3, #12
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	701a      	strb	r2, [r3, #0]
	*step_fase+=1;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	701a      	strb	r2, [r3, #0]

	return;
 8000a34:	bf00      	nop
}
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	f3af 8000 	nop.w
 8000a40:	66666666 	.word	0x66666666
 8000a44:	400a6666 	.word	0x400a6666
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	408ff800 	.word	0x408ff800
 8000a50:	20000000 	.word	0x20000000
 8000a54:	080070b8 	.word	0x080070b8
 8000a58:	45800000 	.word	0x45800000
 8000a5c:	200003b8 	.word	0x200003b8
 8000a60:	40010000 	.word	0x40010000
 8000a64:	080070cc 	.word	0x080070cc

08000a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b2c:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <MX_GPIO_Init+0x150>)
 8000b2e:	f001 fdf9 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4821      	ldr	r0, [pc, #132]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000b38:	f001 fdf4 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <MX_GPIO_Init+0x158>)
 8000b54:	f001 fc22 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b58:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0x150>)
 8000b72:	f001 fc13 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000b8e:	f001 fc05 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_GPIO_Init+0x154>)
 8000ba6:	f001 fbf9 	bl	800239c <HAL_GPIO_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3730      	adds	r7, #48	; 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021800 	.word	0x40021800
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc8:	f000 fe47 	bl	800185a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bcc:	f000 f9b6 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd0:	f7ff ff4a 	bl	8000a68 <MX_GPIO_Init>
  MX_ETH_Init();
 8000bd4:	f7ff fd7a 	bl	80006cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bd8:	f000 fcde 	bl	8001598 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bdc:	f000 fd6c 	bl	80016b8 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000be0:	f7ff fd00 	bl	80005e4 <MX_DAC_Init>
  MX_TIM1_Init();
 8000be4:	f000 fb6e 	bl	80012c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000be8:	f000 fc18 	bl	800141c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000bec:	2100      	movs	r1, #0
 8000bee:	48af      	ldr	r0, [pc, #700]	; (8000eac <main+0x2e8>)
 8000bf0:	f000 ffe7 	bl	8001bc2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	48ad      	ldr	r0, [pc, #692]	; (8000eac <main+0x2e8>)
 8000bf8:	f000 ffe3 	bl	8001bc2 <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	48ac      	ldr	r0, [pc, #688]	; (8000eb0 <main+0x2ec>)
 8000c00:	f003 f930 	bl	8003e64 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000c04:	4bab      	ldr	r3, [pc, #684]	; (8000eb4 <main+0x2f0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK){
 8000c0a:	48ab      	ldr	r0, [pc, #684]	; (8000eb8 <main+0x2f4>)
 8000c0c:	f003 f850 	bl	8003cb0 <HAL_TIM_Base_Start_IT>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <main+0x56>
	  /* Starting Error */
	  Error_Handler();
 8000c16:	f000 fa41 	bl	800109c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // gestione stato + LED
	  switch(genSigState){
 8000c1a:	4ba8      	ldr	r3, [pc, #672]	; (8000ebc <main+0x2f8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b05      	cmp	r3, #5
 8000c20:	f200 8120 	bhi.w	8000e64 <main+0x2a0>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <main+0x68>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c45 	.word	0x08000c45
 8000c30:	08000ca1 	.word	0x08000ca1
 8000c34:	08000cfd 	.word	0x08000cfd
 8000c38:	08000d59 	.word	0x08000d59
 8000c3c:	08000db5 	.word	0x08000db5
 8000c40:	08000e0d 	.word	0x08000e0d
		case GS_RESET:
			//printf("reset\r\n");
			//step_index=0;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //accendo rosso
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4a:	489d      	ldr	r0, [pc, #628]	; (8000ec0 <main+0x2fc>)
 8000c4c:	f001 fd6a 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //accendo blu
 8000c50:	2201      	movs	r2, #1
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	489a      	ldr	r0, [pc, #616]	; (8000ec0 <main+0x2fc>)
 8000c56:	f001 fd65 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  //accendo verde
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4898      	ldr	r0, [pc, #608]	; (8000ec0 <main+0x2fc>)
 8000c60:	f001 fd60 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	4896      	ldr	r0, [pc, #600]	; (8000ec4 <main+0x300>)
 8000c6a:	f001 fd43 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 8111 	beq.w	8000e98 <main+0x2d4>
 8000c76:	4b94      	ldr	r3, [pc, #592]	; (8000ec8 <main+0x304>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 810c 	beq.w	8000e98 <main+0x2d4>
				genSigState=FASE1;
 8000c80:	4b8e      	ldr	r3, [pc, #568]	; (8000ebc <main+0x2f8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
				step_index=0; // inizia la prossima fase dall'inizio
 8000c86:	4b91      	ldr	r3, [pc, #580]	; (8000ecc <main+0x308>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000c8c:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <main+0x30c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000c92:	4b8d      	ldr	r3, [pc, #564]	; (8000ec8 <main+0x304>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- CASE 1 ----\r\n\n");
 8000c98:	488e      	ldr	r0, [pc, #568]	; (8000ed4 <main+0x310>)
 8000c9a:	f005 fa83 	bl	80061a4 <puts>

				continue;
 8000c9e:	e140      	b.n	8000f22 <main+0x35e>
			}
			break;

		case FASE1:
			//printf("case 1\r\n");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //accendo rosso
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4886      	ldr	r0, [pc, #536]	; (8000ec0 <main+0x2fc>)
 8000ca8:	f001 fd3c 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  //accendo blu
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <main+0x2fc>)
 8000cb2:	f001 fd37 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  //accendo verde
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4881      	ldr	r0, [pc, #516]	; (8000ec0 <main+0x2fc>)
 8000cbc:	f001 fd32 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <main+0x300>)
 8000cc6:	f001 fd15 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 80e5 	beq.w	8000e9c <main+0x2d8>
 8000cd2:	4b7d      	ldr	r3, [pc, #500]	; (8000ec8 <main+0x304>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80e0 	beq.w	8000e9c <main+0x2d8>
				genSigState=FASE2;
 8000cdc:	4b77      	ldr	r3, [pc, #476]	; (8000ebc <main+0x2f8>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	601a      	str	r2, [r3, #0]
				step_index=0;
 8000ce2:	4b7a      	ldr	r3, [pc, #488]	; (8000ecc <main+0x308>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000ce8:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <main+0x30c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000cee:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <main+0x304>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- CASE 2 ----\r\n\n");
 8000cf4:	4878      	ldr	r0, [pc, #480]	; (8000ed8 <main+0x314>)
 8000cf6:	f005 fa55 	bl	80061a4 <puts>

				continue;
 8000cfa:	e112      	b.n	8000f22 <main+0x35e>
			}
			break;

		case FASE2:
			//printf("case 2\r\n");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //accendo rosso
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d02:	486f      	ldr	r0, [pc, #444]	; (8000ec0 <main+0x2fc>)
 8000d04:	f001 fd0e 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //accendo blu
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	486c      	ldr	r0, [pc, #432]	; (8000ec0 <main+0x2fc>)
 8000d0e:	f001 fd09 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  //accendo verde
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	486a      	ldr	r0, [pc, #424]	; (8000ec0 <main+0x2fc>)
 8000d18:	f001 fd04 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	4868      	ldr	r0, [pc, #416]	; (8000ec4 <main+0x300>)
 8000d22:	f001 fce7 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80b9 	beq.w	8000ea0 <main+0x2dc>
 8000d2e:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <main+0x304>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80b4 	beq.w	8000ea0 <main+0x2dc>
				genSigState=FASE3;
 8000d38:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <main+0x2f8>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	601a      	str	r2, [r3, #0]
				step_index=0;
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <main+0x308>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000d44:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <main+0x30c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <main+0x304>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- CASE 3 ----\r\n\n");
 8000d50:	4862      	ldr	r0, [pc, #392]	; (8000edc <main+0x318>)
 8000d52:	f005 fa27 	bl	80061a4 <puts>

				continue;
 8000d56:	e0e4      	b.n	8000f22 <main+0x35e>
			}
			break;

		case FASE3:
			//printf("case 3\r\n");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //accendo rosso
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5e:	4858      	ldr	r0, [pc, #352]	; (8000ec0 <main+0x2fc>)
 8000d60:	f001 fce0 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  //accendo blu
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4855      	ldr	r0, [pc, #340]	; (8000ec0 <main+0x2fc>)
 8000d6a:	f001 fcdb 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  //accendo verde
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	4853      	ldr	r0, [pc, #332]	; (8000ec0 <main+0x2fc>)
 8000d74:	f001 fcd6 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <main+0x300>)
 8000d7e:	f001 fcb9 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 808d 	beq.w	8000ea4 <main+0x2e0>
 8000d8a:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <main+0x304>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8088 	beq.w	8000ea4 <main+0x2e0>
				genSigState=FASE4;
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <main+0x2f8>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	601a      	str	r2, [r3, #0]
				step_index=0;
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <main+0x308>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000da0:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <main+0x30c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000da6:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <main+0x304>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- CASE 4 ----\r\n\n");
 8000dac:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <main+0x31c>)
 8000dae:	f005 f9f9 	bl	80061a4 <puts>

				continue;
 8000db2:	e0b6      	b.n	8000f22 <main+0x35e>
			}
			break;

		case FASE4:
			//printf("case 4\r\n");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //accendo rosso
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <main+0x2fc>)
 8000dbc:	f001 fcb2 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //accendo blu
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <main+0x2fc>)
 8000dc6:	f001 fcad 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  //accendo verde
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	483c      	ldr	r0, [pc, #240]	; (8000ec0 <main+0x2fc>)
 8000dd0:	f001 fca8 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd8:	483a      	ldr	r0, [pc, #232]	; (8000ec4 <main+0x300>)
 8000dda:	f001 fc8b 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d061      	beq.n	8000ea8 <main+0x2e4>
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <main+0x304>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d05d      	beq.n	8000ea8 <main+0x2e4>
				genSigState=FASE5;
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <main+0x2f8>)
 8000dee:	2205      	movs	r2, #5
 8000df0:	601a      	str	r2, [r3, #0]
				step_index=0;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <main+0x308>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <main+0x30c>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <main+0x304>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- CASE 5 ----\r\n\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <main+0x320>)
 8000e06:	f005 f9cd 	bl	80061a4 <puts>

				continue;
 8000e0a:	e08a      	b.n	8000f22 <main+0x35e>
			}
			break;

		case FASE5:
			//printf("case 5\r\n");
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  //accendo rosso
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	482b      	ldr	r0, [pc, #172]	; (8000ec0 <main+0x2fc>)
 8000e14:	f001 fc86 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //accendo blu
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	4828      	ldr	r0, [pc, #160]	; (8000ec0 <main+0x2fc>)
 8000e1e:	f001 fc81 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  //accendo verde
 8000e22:	2201      	movs	r2, #1
 8000e24:	2101      	movs	r1, #1
 8000e26:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <main+0x2fc>)
 8000e28:	f001 fc7c 	bl	8002724 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && butt_Mutex){
 8000e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e30:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <main+0x300>)
 8000e32:	f001 fc5f 	bl	80026f4 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d059      	beq.n	8000ef0 <main+0x32c>
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <main+0x304>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d055      	beq.n	8000ef0 <main+0x32c>
				genSigState=0; //mi porta allo stato RESET
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <main+0x2f8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
				step_index=0;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <main+0x308>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
				next_step=1;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <main+0x30c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
				butt_Mutex=0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <main+0x304>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
				printf("\n\n   ---- RESET ----\r\n\n");
 8000e5c:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <main+0x324>)
 8000e5e:	f005 f9a1 	bl	80061a4 <puts>

				continue;
 8000e62:	e05e      	b.n	8000f22 <main+0x35e>
			}
			break;

		default:
			genSigState=GS_RESET;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <main+0x2f8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
			step_index=0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <main+0x308>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

			printf("---DEFAULT\r\n");
 8000e70:	481e      	ldr	r0, [pc, #120]	; (8000eec <main+0x328>)
 8000e72:	f005 f997 	bl	80061a4 <puts>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  //accendo rosso
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <main+0x2fc>)
 8000e7e:	f001 fc51 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //accendo blu
 8000e82:	2201      	movs	r2, #1
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <main+0x2fc>)
 8000e88:	f001 fc4c 	bl	8002724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  //accendo verde
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <main+0x2fc>)
 8000e92:	f001 fc47 	bl	8002724 <HAL_GPIO_WritePin>
			break;
 8000e96:	e02c      	b.n	8000ef2 <main+0x32e>
			break;
 8000e98:	bf00      	nop
 8000e9a:	e02a      	b.n	8000ef2 <main+0x32e>
			break;
 8000e9c:	bf00      	nop
 8000e9e:	e028      	b.n	8000ef2 <main+0x32e>
			break;
 8000ea0:	bf00      	nop
 8000ea2:	e026      	b.n	8000ef2 <main+0x32e>
			break;
 8000ea4:	bf00      	nop
 8000ea6:	e024      	b.n	8000ef2 <main+0x32e>
			break;
 8000ea8:	bf00      	nop
 8000eaa:	e022      	b.n	8000ef2 <main+0x32e>
 8000eac:	200003b8 	.word	0x200003b8
 8000eb0:	200004d0 	.word	0x200004d0
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	2000051c 	.word	0x2000051c
 8000ebc:	200004bc 	.word	0x200004bc
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	200001e4 	.word	0x200001e4
 8000ecc:	200004c0 	.word	0x200004c0
 8000ed0:	200001e8 	.word	0x200001e8
 8000ed4:	080070ec 	.word	0x080070ec
 8000ed8:	08007104 	.word	0x08007104
 8000edc:	0800711c 	.word	0x0800711c
 8000ee0:	08007134 	.word	0x08007134
 8000ee4:	0800714c 	.word	0x0800714c
 8000ee8:	08007164 	.word	0x08007164
 8000eec:	0800717c 	.word	0x0800717c
			break;
 8000ef0:	bf00      	nop
	  }


	  p_step_index=&step_index;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <main+0x360>)
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <main+0x364>)
 8000ef6:	601a      	str	r2, [r3, #0]
	  p_next_step=&next_step;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <main+0x368>)
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <main+0x36c>)
 8000efc:	601a      	str	r2, [r3, #0]

	  // se mutex è ok, avvia prossimo step della fase
	  if(stepMutex==PLAY){
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <main+0x370>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	f47f ae89 	bne.w	8000c1a <main+0x56>
		  PlayStep(genSigState, p_step_index, p_next_step);
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <main+0x374>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <main+0x360>)
 8000f10:	6811      	ldr	r1, [r2, #0]
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <main+0x368>)
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fcde 	bl	80008d8 <PlayStep>
		  stepMutex=WAIT;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <main+0x370>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
	  switch(genSigState){
 8000f22:	e67a      	b.n	8000c1a <main+0x56>
 8000f24:	200004c4 	.word	0x200004c4
 8000f28:	200004c0 	.word	0x200004c0
 8000f2c:	200004c8 	.word	0x200004c8
 8000f30:	200001e8 	.word	0x200001e8
 8000f34:	200001e0 	.word	0x200001e0
 8000f38:	200004bc 	.word	0x200004bc

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 f89c 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f60:	f001 fd42 	bl	80029e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <SystemClock_Config+0xcc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <SystemClock_Config+0xcc>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <SystemClock_Config+0xd0>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000fb0:	2390      	movs	r3, #144	; 0x90
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fd1f 	bl	8002a08 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd0:	f000 f864 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 ffb7 	bl	8002f64 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ffc:	f000 f84e 	bl	800109c <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001018:	1d39      	adds	r1, r7, #4
 800101a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101e:	2201      	movs	r2, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <__io_putchar+0x20>)
 8001022:	f004 f875 	bl	8005110 <HAL_UART_Transmit>
  return ch;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000568 	.word	0x20000568

08001034 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt di TIM2 (0.33s)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d11d      	bne.n	8001080 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		printf("TICK - next_step=%d\r\n", next_step);
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800104c:	f005 f824 	bl	8006098 <iprintf>

		next_step--;
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800105a:	701a      	strb	r2, [r3, #0]
		if(next_step==0 && stepMutex==WAIT){
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d106      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x3e>
			stepMutex=PLAY;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]
			//printf("stepMutex=PLAY\r\n");
		}
		if(butt_Mutex==0){
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_TIM_PeriodElapsedCallback+0x4c>
			butt_Mutex=1;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000051c 	.word	0x2000051c
 800108c:	200001e8 	.word	0x200001e8
 8001090:	08007188 	.word	0x08007188
 8001094:	200001e0 	.word	0x200001e0
 8001098:	200001e4 	.word	0x200001e4

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x44>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x44>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x44>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x44>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x44>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 fbca 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM2_IRQHandler+0x10>)
 800114a:	f002 ff85 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000051c 	.word	0x2000051c

08001158 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	e00a      	b.n	8001180 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800116a:	f3af 8000 	nop.w
 800116e:	4601      	mov	r1, r0
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60ba      	str	r2, [r7, #8]
 8001176:	b2ca      	uxtb	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf0      	blt.n	800116a <_read+0x12>
	}

return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e009      	b.n	80011b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff2f 	bl	8001010 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf1      	blt.n	80011a4 <_write+0x12>
	}
	return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_close>:

int _close(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
	return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f2:	605a      	str	r2, [r3, #4]
	return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_isatty>:

int _isatty(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	return 1;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f004 fee6 	bl	8006034 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20080000 	.word	0x20080000
 8001294:	00000400 	.word	0x00000400
 8001298:	200004cc 	.word	0x200004cc
 800129c:	20000b10 	.word	0x20000b10

080012a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09a      	sub	sp, #104	; 0x68
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	222c      	movs	r2, #44	; 0x2c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fec2 	bl	8006088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <MX_TIM1_Init+0x150>)
 8001306:	4a44      	ldr	r2, [pc, #272]	; (8001418 <MX_TIM1_Init+0x154>)
 8001308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_TIM1_Init+0x150>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b40      	ldr	r3, [pc, #256]	; (8001414 <MX_TIM1_Init+0x150>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_TIM1_Init+0x150>)
 8001318:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800131c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <MX_TIM1_Init+0x150>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_TIM1_Init+0x150>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <MX_TIM1_Init+0x150>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001330:	4838      	ldr	r0, [pc, #224]	; (8001414 <MX_TIM1_Init+0x150>)
 8001332:	f002 fc65 	bl	8003c00 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800133c:	f7ff feae 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800134a:	4619      	mov	r1, r3
 800134c:	4831      	ldr	r0, [pc, #196]	; (8001414 <MX_TIM1_Init+0x150>)
 800134e:	f003 f8b7 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001358:	f7ff fea0 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135c:	482d      	ldr	r0, [pc, #180]	; (8001414 <MX_TIM1_Init+0x150>)
 800135e:	f002 fd1f 	bl	8003da0 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001368:	f7ff fe98 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001378:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800137c:	4619      	mov	r1, r3
 800137e:	4825      	ldr	r0, [pc, #148]	; (8001414 <MX_TIM1_Init+0x150>)
 8001380:	f003 fd4e 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800138a:	f7ff fe87 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM1_Init+0x150>)
 80013b4:	f002 ff70 	bl	8004298 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80013be:	f7ff fe6d 	bl	800109c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM1_Init+0x150>)
 80013f8:	f003 fda0 	bl	8004f3c <HAL_TIMEx_ConfigBreakDeadTime>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001402:	f7ff fe4b 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM1_Init+0x150>)
 8001408:	f000 f88e 	bl	8001528 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3768      	adds	r7, #104	; 0x68
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200004d0 	.word	0x200004d0
 8001418:	40010000 	.word	0x40010000

0800141c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM2_Init+0x98>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001444:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001448:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM2_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3332;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001452:	f640 5204 	movw	r2, #3332	; 0xd04
 8001456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM2_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	4813      	ldr	r0, [pc, #76]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001466:	f002 fbcb 	bl	8003c00 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001470:	f7ff fe14 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001482:	f003 f81d 	bl	80044c0 <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800148c:	f7ff fe06 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_TIM2_Init+0x98>)
 800149e:	f003 fcbf 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80014a8:	f7ff fdf8 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000051c 	.word	0x2000051c

080014b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <HAL_TIM_Base_MspInit+0x68>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10c      	bne.n	80014e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014e2:	e018      	b.n	8001516 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_TIM_Base_MspInit+0x6c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201c      	movs	r0, #28
 800150c:	f000 fb01 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f000 fb1a 	bl	8001b4a <HAL_NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40010000 	.word	0x40010000
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_TIM_MspPostInit+0x64>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d11c      	bne.n	8001584 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_TIM_MspPostInit+0x68>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_TIM_MspPostInit+0x68>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_MspPostInit+0x68>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001566:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_TIM_MspPostInit+0x6c>)
 8001580:	f000 ff0c 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40010000 	.word	0x40010000
 8001590:	40023800 	.word	0x40023800
 8001594:	40021000 	.word	0x40021000

08001598 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_USART3_UART_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART3_UART_Init+0x58>)
 80015dc:	f003 fd4a 	bl	8005074 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015e6:	f7ff fd59 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000568 	.word	0x20000568
 80015f4:	40004800 	.word	0x40004800

080015f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ae      	sub	sp, #184	; 0xb8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2290      	movs	r2, #144	; 0x90
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fd35 	bl	8006088 <memset>
  if(uartHandle->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_UART_MspInit+0xb4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13c      	bne.n	80016a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4618      	mov	r0, r3
 8001638:	f001 feba 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001642:	f7ff fd2b 	bl	800109c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001690:	2307      	movs	r3, #7
 8001692:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001696:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_UART_MspInit+0xbc>)
 800169e:	f000 fe7d 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	37b8      	adds	r7, #184	; 0xb8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40004800 	.word	0x40004800
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c6:	2206      	movs	r2, #6
 80016c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d8:	2202      	movs	r2, #2
 80016da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016de:	2201      	movs	r2, #1
 80016e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fc:	f001 f82b 	bl	8002756 <HAL_PCD_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff fcc9 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200005f0 	.word	0x200005f0

08001714 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ae      	sub	sp, #184	; 0xb8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2290      	movs	r2, #144	; 0x90
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f004 fca7 	bl	8006088 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001742:	d159      	bne.n	80017f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001748:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fe2b 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001760:	f7ff fc9c 	bl	800109c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_PCD_MspInit+0xec>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <HAL_PCD_MspInit+0xec>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_PCD_MspInit+0xec>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800177c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001796:	230a      	movs	r3, #10
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <HAL_PCD_MspInit+0xf0>)
 80017a4:	f000 fdfa 	bl	800239c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_PCD_MspInit+0xf0>)
 80017c4:	f000 fdea 	bl	800239c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	6353      	str	r3, [r2, #52]	; 0x34
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6453      	str	r3, [r2, #68]	; 0x44
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017f8:	bf00      	nop
 80017fa:	37b8      	adds	r7, #184	; 0xb8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180e:	490e      	ldr	r1, [pc, #56]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001832:	f7ff fd35 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f004 fc03 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff f9c3 	bl	8000bc4 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 800184c:	08007260 	.word	0x08007260
  ldr r2, =_sbss
 8001850:	2000039c 	.word	0x2000039c
  ldr r4, =_ebss
 8001854:	20000b0c 	.word	0x20000b0c

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>

0800185a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185e:	2003      	movs	r0, #3
 8001860:	f000 f94c 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f805 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186a:	f7ff fc1d 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f967 	bl	8001b66 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f92f 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200001ec 	.word	0x200001ec
 80018cc:	200001f4 	.word	0x200001f4
 80018d0:	200001f0 	.word	0x200001f0

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001f4 	.word	0x200001f4
 80018f8:	20000af8 	.word	0x20000af8

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000af8 	.word	0x20000af8

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001f4 	.word	0x200001f4

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0000 	.word	0x05fa0000

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff3e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa2 	bl	8001ab8 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e014      	b.n	8001bba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7fe fd53 	bl	800064c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	795b      	ldrb	r3, [r3, #5]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DAC_Start+0x16>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e040      	b.n	8001c5a <HAL_DAC_Start+0x98>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001c0c:	2b3c      	cmp	r3, #60	; 0x3c
 8001c0e:	d11d      	bne.n	8001c4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e014      	b.n	8001c4c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	213c      	movs	r1, #60	; 0x3c
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0202 	orr.w	r2, r2, #2
 8001c4a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b087      	sub	sp, #28
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e004      	b.n	8001c9a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	3314      	adds	r3, #20
 8001c98:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DAC_ConfigChannel+0x18>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e03c      	b.n	8001d42 <HAL_DAC_ConfigChannel+0x92>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	22c0      	movs	r2, #192	; 0xc0
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06a      	b.n	8001e38 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d106      	bne.n	8001d7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2223      	movs	r2, #35	; 0x23
 8001d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe fcf7 	bl	8000768 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_ETH_Init+0xf0>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_ETH_Init+0xf0>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_ETH_Init+0xf0>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_ETH_Init+0xf4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_ETH_Init+0xf4>)
 8001d98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d9c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_ETH_Init+0xf4>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4927      	ldr	r1, [pc, #156]	; (8001e44 <HAL_ETH_Init+0xf4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_ETH_Init+0xf4>)
 8001dae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff fd98 	bl	80018fc <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dce:	e011      	b.n	8001df4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001dd0:	f7ff fd94 	bl	80018fc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dde:	d909      	bls.n	8001df4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2204      	movs	r2, #4
 8001de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	22e0      	movs	r2, #224	; 0xe0
 8001dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e021      	b.n	8001e38 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e4      	bne.n	8001dd0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f958 	bl	80020bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f9ff 	bl	8002210 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa55 	bl	80022c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2100      	movs	r1, #0
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f9bd 	bl	80021a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2210      	movs	r2, #16
 8001e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800

08001e48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <ETH_SetMACConfig+0x15c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7c1b      	ldrb	r3, [r3, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <ETH_SetMACConfig+0x28>
 8001e6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e6e:	e000      	b.n	8001e72 <ETH_SetMACConfig+0x2a>
 8001e70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7c5b      	ldrb	r3, [r3, #17]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <ETH_SetMACConfig+0x38>
 8001e7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7e:	e000      	b.n	8001e82 <ETH_SetMACConfig+0x3a>
 8001e80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7fdb      	ldrb	r3, [r3, #31]
 8001e8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	7f92      	ldrb	r2, [r2, #30]
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d102      	bne.n	8001ea6 <ETH_SetMACConfig+0x5e>
 8001ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea4:	e000      	b.n	8001ea8 <ETH_SetMACConfig+0x60>
 8001ea6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7f1b      	ldrb	r3, [r3, #28]
 8001eae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	791b      	ldrb	r3, [r3, #4]
 8001ebc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d102      	bne.n	8001ed0 <ETH_SetMACConfig+0x88>
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	e000      	b.n	8001ed2 <ETH_SetMACConfig+0x8a>
 8001ed0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7bdb      	ldrb	r3, [r3, #15]
 8001ed8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ee8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fd06 	bl	8001914 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d101      	bne.n	8001f36 <ETH_SetMACConfig+0xee>
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	e000      	b.n	8001f38 <ETH_SetMACConfig+0xf0>
 8001f36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d101      	bne.n	8001f4e <ETH_SetMACConfig+0x106>
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x108>
 8001f4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f58:	2a01      	cmp	r2, #1
 8001f5a:	d101      	bne.n	8001f60 <ETH_SetMACConfig+0x118>
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	e000      	b.n	8001f62 <ETH_SetMACConfig+0x11a>
 8001f60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0x12a>
 8001f6e:	2202      	movs	r2, #2
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x12c>
 8001f72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff fcc1 	bl	8001914 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	ff20810f 	.word	0xff20810f

08001fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <ETH_SetDMAConfig+0x110>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	7b1b      	ldrb	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <ETH_SetDMAConfig+0x2c>
 8001fce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fd2:	e000      	b.n	8001fd6 <ETH_SetDMAConfig+0x2e>
 8001fd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7b5b      	ldrb	r3, [r3, #13]
 8001fda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	7f52      	ldrb	r2, [r2, #29]
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d102      	bne.n	8001fec <ETH_SetDMAConfig+0x44>
 8001fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fea:	e000      	b.n	8001fee <ETH_SetDMAConfig+0x46>
 8001fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	7b9b      	ldrb	r3, [r3, #14]
 8001ff4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ff6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ffc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7f1b      	ldrb	r3, [r3, #28]
 8002002:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002004:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7f9b      	ldrb	r3, [r3, #30]
 800200a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800200c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002012:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201c:	4313      	orrs	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	461a      	mov	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fc68 	bl	8001914 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800205c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002062:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002068:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002070:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002072:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800207a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002080:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800208e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fc39 	bl	8001914 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	f8de3f23 	.word	0xf8de3f23

080020bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0a6      	sub	sp, #152	; 0x98
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020f8:	2300      	movs	r3, #0
 80020fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002102:	2300      	movs	r3, #0
 8002104:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800211e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002122:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002128:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002130:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fe86 	bl	8001e48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800213c:	2301      	movs	r3, #1
 800213e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002140:	2301      	movs	r3, #1
 8002142:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800214a:	2301      	movs	r3, #1
 800214c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002170:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002176:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800217e:	2301      	movs	r3, #1
 8002180:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff08 	bl	8001fa8 <ETH_SetDMAConfig>
}
 8002198:	bf00      	nop
 800219a:	3798      	adds	r7, #152	; 0x98
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3305      	adds	r3, #5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	3204      	adds	r2, #4
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <ETH_MACAddressConfig+0x68>)
 80021c2:	4413      	add	r3, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3303      	adds	r3, #3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	061a      	lsls	r2, r3, #24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3302      	adds	r3, #2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	4313      	orrs	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <ETH_MACAddressConfig+0x6c>)
 80021f2:	4413      	add	r3, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6013      	str	r3, [r2, #0]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40028040 	.word	0x40028040
 800220c:	40028044 	.word	0x40028044

08002210 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e03e      	b.n	800229c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68d9      	ldr	r1, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	3206      	adds	r2, #6
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d80c      	bhi.n	8002280 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	e004      	b.n	800228a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d9bd      	bls.n	800221e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	611a      	str	r2, [r3, #16]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e046      	b.n	800235e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6919      	ldr	r1, [r3, #16]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800230c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002314:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	3212      	adds	r2, #18
 800232a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d80c      	bhi.n	800234e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6919      	ldr	r1, [r3, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	e004      	b.n	8002358 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d9b5      	bls.n	80022d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238e:	60da      	str	r2, [r3, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e175      	b.n	80026a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8164 	bne.w	80026a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d005      	beq.n	80023f2 <HAL_GPIO_Init+0x56>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d017      	beq.n	8002490 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d123      	bne.n	80024e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80be 	beq.w	80026a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_GPIO_Init+0x324>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_GPIO_Init+0x324>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_GPIO_Init+0x324>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800253e:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_GPIO_Init+0x328>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_GPIO_Init+0x32c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d037      	beq.n	80025da <HAL_GPIO_Init+0x23e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_GPIO_Init+0x330>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d031      	beq.n	80025d6 <HAL_GPIO_Init+0x23a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a56      	ldr	r2, [pc, #344]	; (80026d0 <HAL_GPIO_Init+0x334>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x236>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a55      	ldr	r2, [pc, #340]	; (80026d4 <HAL_GPIO_Init+0x338>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x232>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <HAL_GPIO_Init+0x33c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x22e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a53      	ldr	r2, [pc, #332]	; (80026dc <HAL_GPIO_Init+0x340>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x22a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_GPIO_Init+0x344>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x226>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_GPIO_Init+0x348>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x222>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x21e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4f      	ldr	r2, [pc, #316]	; (80026ec <HAL_GPIO_Init+0x350>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x21a>
 80025b2:	2309      	movs	r3, #9
 80025b4:	e012      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025b6:	230a      	movs	r3, #10
 80025b8:	e010      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ba:	2308      	movs	r3, #8
 80025bc:	e00e      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x328>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_GPIO_Init+0x354>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae86 	bls.w	80023bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40021c00 	.word	0x40021c00
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40022400 	.word	0x40022400
 80026f0:	40013c00 	.word	0x40013c00

080026f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e001      	b.n	8002716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002758:	b08f      	sub	sp, #60	; 0x3c
 800275a:	af0a      	add	r7, sp, #40	; 0x28
 800275c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e116      	b.n	8002996 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe ffc6 	bl	8001714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2203      	movs	r2, #3
 800278c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 f9a8 	bl	8005afc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	687e      	ldr	r6, [r7, #4]
 80027b4:	466d      	mov	r5, sp
 80027b6:	f106 0410 	add.w	r4, r6, #16
 80027ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ca:	1d33      	adds	r3, r6, #4
 80027cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ce:	6838      	ldr	r0, [r7, #0]
 80027d0:	f003 f93c 	bl	8005a4c <USB_CoreInit>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0d7      	b.n	8002996 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 f996 	bl	8005b1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e04a      	b.n	800288e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	333d      	adds	r3, #61	; 0x3d
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	333c      	adds	r3, #60	; 0x3c
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	b298      	uxth	r0, r3
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3344      	adds	r3, #68	; 0x44
 8002834:	4602      	mov	r2, r0
 8002836:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3340      	adds	r3, #64	; 0x40
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3348      	adds	r3, #72	; 0x48
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334c      	adds	r3, #76	; 0x4c
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3354      	adds	r3, #84	; 0x54
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	3301      	adds	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3af      	bcc.n	80027f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e044      	b.n	8002928 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3301      	adds	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3b5      	bcc.n	800289e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	687e      	ldr	r6, [r7, #4]
 800293a:	466d      	mov	r5, sp
 800293c:	f106 0410 	add.w	r4, r6, #16
 8002940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002948:	e894 0003 	ldmia.w	r4, {r0, r1}
 800294c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002950:	1d33      	adds	r3, r6, #4
 8002952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f003 f92f 	bl	8005bb8 <USB_DevInit>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e014      	b.n	8002996 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f80b 	bl	80029a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 faed 	bl	8005f6e <USB_DevDisconnect>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080029a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	10000003 	.word	0x10000003

080029e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e29b      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2c:	4b96      	ldr	r3, [pc, #600]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a38:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d112      	bne.n	8002a6a <HAL_RCC_OscConfig+0x62>
 8002a44:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x130>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d168      	bne.n	8002b38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e275      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x7a>
 8002a74:	4b84      	ldr	r3, [pc, #528]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a83      	ldr	r2, [pc, #524]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e02e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x9c>
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7e      	ldr	r2, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7b      	ldr	r2, [pc, #492]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xc0>
 8002aae:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a75      	ldr	r2, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a72      	ldr	r2, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd8>
 8002ac8:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6b      	ldr	r2, [pc, #428]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ff08 	bl	80018fc <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe ff04 	bl	80018fc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e229      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe8>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fef4 	bl	80018fc <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fef0 	bl	80018fc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e215      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x110>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d069      	beq.n	8002c1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b52:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x190>
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1e9      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	493d      	ldr	r1, [pc, #244]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e040      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a38      	ldr	r2, [pc, #224]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fea6 	bl	80018fc <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fea2 	bl	80018fc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1c7      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4929      	ldr	r1, [pc, #164]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
 8002be6:	e018      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fe82 	bl	80018fc <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fe7e 	bl	80018fc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1a3      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d038      	beq.n	8002c98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d019      	beq.n	8002c62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fe5f 	bl	80018fc <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c42:	f7fe fe5b 	bl	80018fc <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e180      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x23a>
 8002c60:	e01a      	b.n	8002c98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_RCC_OscConfig+0x280>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fe45 	bl	80018fc <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe41 	bl	80018fc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d903      	bls.n	8002c8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e166      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
 8002c88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ee      	bne.n	8002c76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a4 	beq.w	8002dee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a88      	ldr	r2, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b86      	ldr	r3, [pc, #536]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cce:	4b83      	ldr	r3, [pc, #524]	; (8002edc <HAL_RCC_OscConfig+0x4d4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cda:	4b80      	ldr	r3, [pc, #512]	; (8002edc <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7f      	ldr	r2, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fe09 	bl	80018fc <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe fe05 	bl	80018fc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	; 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e12a      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x4d4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x31a>
 8002d14:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a6f      	ldr	r2, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e02d      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x33c>
 8002d2a:	4b6b      	ldr	r3, [pc, #428]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a6a      	ldr	r2, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x35e>
 8002d4c:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a5e      	ldr	r2, [pc, #376]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe fdb9 	bl	80018fc <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fdb5 	bl	80018fc <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0d8      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x386>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fda3 	bl	80018fc <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fd9f 	bl	80018fc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0c2      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80ae 	beq.w	8002f54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d06d      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d14b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a31      	ldr	r2, [pc, #196]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fd70 	bl	80018fc <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fd6c 	bl	80018fc <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e091      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	019b      	lsls	r3, r3, #6
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fd3e 	bl	80018fc <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fd3a 	bl	80018fc <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e05f      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x47c>
 8002ea2:	e057      	b.n	8002f54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fd24 	bl	80018fc <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fd20 	bl	80018fc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e045      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4b0>
 8002ed6:	e03d      	b.n	8002f54 <HAL_RCC_OscConfig+0x54c>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_RCC_OscConfig+0x558>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d030      	beq.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d129      	bne.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d122      	bne.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f10:	4013      	ands	r3, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d119      	bne.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d10f      	bne.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0d0      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d040      	beq.n	8003088 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d115      	bne.n	8003046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e073      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06b      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4936      	ldr	r1, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003058:	f7fe fc50 	bl	80018fc <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fc4c 	bl	80018fc <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e053      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d210      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4922      	ldr	r1, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f821 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1cc>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1d0>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1d4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fbac 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	080071a0 	.word	0x080071a0
 8003134:	200001ec 	.word	0x200001ec
 8003138:	200001f0 	.word	0x200001f0

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003140:	b094      	sub	sp, #80	; 0x50
 8003142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	647b      	str	r3, [r7, #68]	; 0x44
 8003148:	2300      	movs	r3, #0
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	2300      	movs	r3, #0
 800314e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003154:	4b79      	ldr	r3, [pc, #484]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d00d      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x40>
 8003160:	2b08      	cmp	r3, #8
 8003162:	f200 80e1 	bhi.w	8003328 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 800316a:	2b04      	cmp	r3, #4
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x3a>
 800316e:	e0db      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b73      	ldr	r3, [pc, #460]	; (8003340 <HAL_RCC_GetSysClockFreq+0x204>)
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003174:	e0db      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003176:	4b73      	ldr	r3, [pc, #460]	; (8003344 <HAL_RCC_GetSysClockFreq+0x208>)
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800317a:	e0d8      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003184:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d063      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	2200      	movs	r2, #0
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
 800319c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30
 80031a6:	2300      	movs	r3, #0
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
 80031aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ae:	4622      	mov	r2, r4
 80031b0:	462b      	mov	r3, r5
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	0159      	lsls	r1, r3, #5
 80031bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c0:	0150      	lsls	r0, r2, #5
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4621      	mov	r1, r4
 80031c8:	1a51      	subs	r1, r2, r1
 80031ca:	6139      	str	r1, [r7, #16]
 80031cc:	4629      	mov	r1, r5
 80031ce:	eb63 0301 	sbc.w	r3, r3, r1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e0:	4659      	mov	r1, fp
 80031e2:	018b      	lsls	r3, r1, #6
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ea:	4651      	mov	r1, sl
 80031ec:	018a      	lsls	r2, r1, #6
 80031ee:	4651      	mov	r1, sl
 80031f0:	ebb2 0801 	subs.w	r8, r2, r1
 80031f4:	4659      	mov	r1, fp
 80031f6:	eb63 0901 	sbc.w	r9, r3, r1
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320e:	4690      	mov	r8, r2
 8003210:	4699      	mov	r9, r3
 8003212:	4623      	mov	r3, r4
 8003214:	eb18 0303 	adds.w	r3, r8, r3
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	462b      	mov	r3, r5
 800321c:	eb49 0303 	adc.w	r3, r9, r3
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800322e:	4629      	mov	r1, r5
 8003230:	024b      	lsls	r3, r1, #9
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003238:	4621      	mov	r1, r4
 800323a:	024a      	lsls	r2, r1, #9
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	2200      	movs	r2, #0
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
 8003246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003248:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800324c:	f7fd f848 	bl	80002e0 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003258:	e058      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	2200      	movs	r2, #0
 8003262:	4618      	mov	r0, r3
 8003264:	4611      	mov	r1, r2
 8003266:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800326a:	623b      	str	r3, [r7, #32]
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003274:	4642      	mov	r2, r8
 8003276:	464b      	mov	r3, r9
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	0159      	lsls	r1, r3, #5
 8003282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003286:	0150      	lsls	r0, r2, #5
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4641      	mov	r1, r8
 800328e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003292:	4649      	mov	r1, r9
 8003294:	eb63 0b01 	sbc.w	fp, r3, r1
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ac:	ebb2 040a 	subs.w	r4, r2, sl
 80032b0:	eb63 050b 	sbc.w	r5, r3, fp
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	00eb      	lsls	r3, r5, #3
 80032be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032c2:	00e2      	lsls	r2, r4, #3
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	4643      	mov	r3, r8
 80032ca:	18e3      	adds	r3, r4, r3
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	464b      	mov	r3, r9
 80032d0:	eb45 0303 	adc.w	r3, r5, r3
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032e2:	4629      	mov	r1, r5
 80032e4:	028b      	lsls	r3, r1, #10
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ec:	4621      	mov	r1, r4
 80032ee:	028a      	lsls	r2, r1, #10
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	61fa      	str	r2, [r7, #28]
 80032fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003300:	f7fc ffee 	bl	80002e0 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4613      	mov	r3, r2
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_GetSysClockFreq+0x200>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	3301      	adds	r3, #1
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800331c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003326:	e002      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetSysClockFreq+0x204>)
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800332c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003330:	4618      	mov	r0, r3
 8003332:	3750      	adds	r7, #80	; 0x50
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	00f42400 	.word	0x00f42400
 8003344:	007a1200 	.word	0x007a1200

08003348 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCC_GetHCLKFreq+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200001ec 	.word	0x200001ec

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff0 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	080071b0 	.word	0x080071b0

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	f7ff ffdc 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0b5b      	lsrs	r3, r3, #13
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	080071b0 	.word	0x080071b0

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d8:	4b69      	ldr	r3, [pc, #420]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033e2:	6093      	str	r3, [r2, #8]
 80033e4:	4b66      	ldr	r3, [pc, #408]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	4964      	ldr	r1, [pc, #400]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800340a:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	4959      	ldr	r1, [pc, #356]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d017      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003446:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	494a      	ldr	r1, [pc, #296]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003464:	d101      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003472:	2301      	movs	r3, #1
 8003474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 808b 	beq.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a39      	ldr	r2, [pc, #228]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
 80034a0:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a34      	ldr	r2, [pc, #208]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fe fa20 	bl	80018fc <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fe fa1c 	bl	80018fc <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e38f      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d035      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d02e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d114      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe f9e4 	bl	80018fc <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe f9e0 	bl	80018fc <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e351      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003566:	d111      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003576:	400b      	ands	r3, r1
 8003578:	4901      	ldr	r1, [pc, #4]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
 800357e:	e00b      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003580:	40023800 	.word	0x40023800
 8003584:	40007000 	.word	0x40007000
 8003588:	0ffffcff 	.word	0x0ffffcff
 800358c:	4bac      	ldr	r3, [pc, #688]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4aab      	ldr	r2, [pc, #684]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	4ba9      	ldr	r3, [pc, #676]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	49a6      	ldr	r1, [pc, #664]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d010      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035b6:	4ba2      	ldr	r3, [pc, #648]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035bc:	4aa0      	ldr	r2, [pc, #640]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035c6:	4b9e      	ldr	r3, [pc, #632]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	499b      	ldr	r1, [pc, #620]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e4:	4b96      	ldr	r3, [pc, #600]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f2:	4993      	ldr	r1, [pc, #588]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003606:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003614:	498a      	ldr	r1, [pc, #552]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003628:	4b85      	ldr	r3, [pc, #532]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003636:	4982      	ldr	r1, [pc, #520]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800364a:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4979      	ldr	r1, [pc, #484]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800366c:	4b74      	ldr	r3, [pc, #464]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4971      	ldr	r1, [pc, #452]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800368e:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f023 020c 	bic.w	r2, r3, #12
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	4968      	ldr	r1, [pc, #416]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036b0:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4960      	ldr	r1, [pc, #384]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036d2:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	4957      	ldr	r1, [pc, #348]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	494f      	ldr	r1, [pc, #316]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4946      	ldr	r1, [pc, #280]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	493e      	ldr	r1, [pc, #248]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	4935      	ldr	r1, [pc, #212]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800377c:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378a:	492d      	ldr	r1, [pc, #180]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d011      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ac:	4924      	ldr	r1, [pc, #144]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	4914      	ldr	r1, [pc, #80]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003810:	490b      	ldr	r1, [pc, #44]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00f      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	4902      	ldr	r1, [pc, #8]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003850:	4b8a      	ldr	r3, [pc, #552]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	4986      	ldr	r1, [pc, #536]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003874:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003884:	497d      	ldr	r1, [pc, #500]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d006      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80d6 	beq.w	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a0:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a75      	ldr	r2, [pc, #468]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fe f826 	bl	80018fc <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b4:	f7fe f822 	bl	80018fc <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e195      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11d      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038e6:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fa:	0e1b      	lsrs	r3, r3, #24
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	019a      	lsls	r2, r3, #6
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	4958      	ldr	r1, [pc, #352]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02e      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394c:	d129      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800394e:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395c:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	493e      	ldr	r1, [pc, #248]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800398a:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f023 021f 	bic.w	r2, r3, #31
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	3b01      	subs	r3, #1
 800399a:	4938      	ldr	r1, [pc, #224]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01d      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ae:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b4:	0e1b      	lsrs	r3, r3, #24
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c2:	0f1b      	lsrs	r3, r3, #28
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	019a      	lsls	r2, r3, #6
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	041b      	lsls	r3, r3, #16
 80039d6:	431a      	orrs	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	071b      	lsls	r3, r3, #28
 80039e2:	4926      	ldr	r1, [pc, #152]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d011      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	019a      	lsls	r2, r3, #6
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	071b      	lsls	r3, r3, #28
 8003a12:	491a      	ldr	r1, [pc, #104]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a1a:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a26:	f7fd ff69 	bl	80018fc <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a2e:	f7fd ff65 	bl	80018fc <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0d8      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 80ce 	bne.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd ff4c 	bl	80018fc <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a66:	e00b      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a68:	f7fd ff48 	bl	80018fc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d904      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0bb      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8c:	d0ec      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02e      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d12a      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	0f1b      	lsrs	r3, r3, #28
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	019a      	lsls	r2, r3, #6
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	4944      	ldr	r1, [pc, #272]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	493d      	ldr	r1, [pc, #244]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d022      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b20:	d11d      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	0e1b      	lsrs	r3, r3, #24
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	0f1b      	lsrs	r3, r3, #28
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	019a      	lsls	r2, r3, #6
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	4929      	ldr	r1, [pc, #164]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d028      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	0e1b      	lsrs	r3, r3, #24
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	019a      	lsls	r2, r3, #6
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	4917      	ldr	r1, [pc, #92]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4911      	ldr	r1, [pc, #68]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fe98 	bl	80018fc <HAL_GetTick>
 8003bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd0:	f7fd fe94 	bl	80018fc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e007      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bee:	d1ef      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800

08003c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e049      	b.n	8003ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fc46 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fd30 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e054      	b.n	8003d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d115      	bne.n	8003d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_TIM_Base_Start_IT+0xec>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d015      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d011      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	e008      	b.n	8003d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e000      	b.n	8003d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40001800 	.word	0x40001800
 8003d9c:	00010007 	.word	0x00010007

08003da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e049      	b.n	8003e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f841 	bl	8003e4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 fc60 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_TIM_PWM_Start+0x24>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e03c      	b.n	8003f02 <HAL_TIM_PWM_Start+0x9e>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d109      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0x3e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e02f      	b.n	8003f02 <HAL_TIM_PWM_Start+0x9e>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d109      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x58>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e022      	b.n	8003f02 <HAL_TIM_PWM_Start+0x9e>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d109      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0x72>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	e015      	b.n	8003f02 <HAL_TIM_PWM_Start+0x9e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start+0x8c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e008      	b.n	8003f02 <HAL_TIM_PWM_Start+0x9e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e092      	b.n	8004030 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_PWM_Start+0xb6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	e023      	b.n	8003f62 <HAL_TIM_PWM_Start+0xfe>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_PWM_Start+0xc6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	e01b      	b.n	8003f62 <HAL_TIM_PWM_Start+0xfe>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start+0xd6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f38:	e013      	b.n	8003f62 <HAL_TIM_PWM_Start+0xfe>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Start+0xe6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f48:	e00b      	b.n	8003f62 <HAL_TIM_PWM_Start+0xfe>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start+0xf6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f58:	e003      	b.n	8003f62 <HAL_TIM_PWM_Start+0xfe>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 ff32 	bl	8004dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a30      	ldr	r2, [pc, #192]	; (8004038 <HAL_TIM_PWM_Start+0x1d4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_PWM_Start+0x120>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2f      	ldr	r2, [pc, #188]	; (800403c <HAL_TIM_PWM_Start+0x1d8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_PWM_Start+0x124>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_TIM_PWM_Start+0x126>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a25      	ldr	r2, [pc, #148]	; (8004038 <HAL_TIM_PWM_Start+0x1d4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d01d      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <HAL_TIM_PWM_Start+0x1dc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <HAL_TIM_PWM_Start+0x1e0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_TIM_PWM_Start+0x1e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_TIM_PWM_Start+0x1d8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_TIM_PWM_Start+0x1e8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIM_PWM_Start+0x18a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_TIM_PWM_Start+0x1ec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d115      	bne.n	800401a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_TIM_PWM_Start+0x1f0>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d015      	beq.n	800402c <HAL_TIM_PWM_Start+0x1c8>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d011      	beq.n	800402c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	e008      	b.n	800402c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e000      	b.n	800402e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40010000 	.word	0x40010000
 800403c:	40010400 	.word	0x40010400
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40001800 	.word	0x40001800
 8004054:	00010007 	.word	0x00010007

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fae4 	bl	8004668 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fad6 	bl	8004654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fae7 	bl	800467c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 faba 	bl	8004668 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 faac 	bl	8004654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fabd 	bl	800467c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0208 	mvn.w	r2, #8
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa90 	bl	8004668 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa82 	bl	8004654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa93 	bl	800467c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2208      	movs	r2, #8
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa66 	bl	8004668 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa58 	bl	8004654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa69 	bl	800467c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0201 	mvn.w	r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc ff2c 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 ff22 	bl	800504c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d10e      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d107      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 ff15 	bl	8005060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d10e      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d107      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa17 	bl	8004690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d10e      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d107      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0220 	mvn.w	r2, #32
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fed5 	bl	8005038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0ff      	b.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b14      	cmp	r3, #20
 80042c2:	f200 80f0 	bhi.w	80044a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004321 	.word	0x08004321
 80042d0:	080044a7 	.word	0x080044a7
 80042d4:	080044a7 	.word	0x080044a7
 80042d8:	080044a7 	.word	0x080044a7
 80042dc:	08004361 	.word	0x08004361
 80042e0:	080044a7 	.word	0x080044a7
 80042e4:	080044a7 	.word	0x080044a7
 80042e8:	080044a7 	.word	0x080044a7
 80042ec:	080043a3 	.word	0x080043a3
 80042f0:	080044a7 	.word	0x080044a7
 80042f4:	080044a7 	.word	0x080044a7
 80042f8:	080044a7 	.word	0x080044a7
 80042fc:	080043e3 	.word	0x080043e3
 8004300:	080044a7 	.word	0x080044a7
 8004304:	080044a7 	.word	0x080044a7
 8004308:	080044a7 	.word	0x080044a7
 800430c:	08004425 	.word	0x08004425
 8004310:	080044a7 	.word	0x080044a7
 8004314:	080044a7 	.word	0x080044a7
 8004318:	080044a7 	.word	0x080044a7
 800431c:	08004465 	.word	0x08004465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa5c 	bl	80047e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0208 	orr.w	r2, r2, #8
 800433a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0204 	bic.w	r2, r2, #4
 800434a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6999      	ldr	r1, [r3, #24]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	619a      	str	r2, [r3, #24]
      break;
 800435e:	e0a5      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 faae 	bl	80048c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6999      	ldr	r1, [r3, #24]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	021a      	lsls	r2, r3, #8
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	619a      	str	r2, [r3, #24]
      break;
 80043a0:	e084      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fb05 	bl	80049b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0208 	orr.w	r2, r2, #8
 80043bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0204 	bic.w	r2, r2, #4
 80043cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	61da      	str	r2, [r3, #28]
      break;
 80043e0:	e064      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb5b 	bl	8004aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	61da      	str	r2, [r3, #28]
      break;
 8004422:	e043      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb92 	bl	8004b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004462:	e023      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fbc4 	bl	8004bf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044a4:	e002      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
      break;
 80044aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_ConfigClockSource+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0b4      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x186>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4b56      	ldr	r3, [pc, #344]	; (8004650 <HAL_TIM_ConfigClockSource+0x190>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xd4>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	f000 8086 	beq.w	8004632 <HAL_TIM_ConfigClockSource+0x172>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0xa6>
 8004530:	2b70      	cmp	r3, #112	; 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x11a>
 8004538:	2b60      	cmp	r3, #96	; 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b50      	cmp	r3, #80	; 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xfa>
 8004540:	2b50      	cmp	r3, #80	; 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x13a>
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f000 fc0d 	bl	8004d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04f      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f000 fbf6 	bl	8004d94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 fb6a 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	; 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fbc3 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fb89 	bl	8004cfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	; 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fbb3 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fb4a 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	; 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fba3 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 8004618:	e00c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fb9a 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 800462a:	e003      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	fffeff88 	.word	0xfffeff88

08004654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3d      	ldr	r2, [pc, #244]	; (80047bc <TIM_Base_SetConfig+0x118>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <TIM_Base_SetConfig+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <TIM_Base_SetConfig+0x120>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d027      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <TIM_Base_SetConfig+0x118>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d023      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <TIM_Base_SetConfig+0x11c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <TIM_Base_SetConfig+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a28      	ldr	r2, [pc, #160]	; (80047cc <TIM_Base_SetConfig+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a26      	ldr	r2, [pc, #152]	; (80047d4 <TIM_Base_SetConfig+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <TIM_Base_SetConfig+0x134>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a24      	ldr	r2, [pc, #144]	; (80047dc <TIM_Base_SetConfig+0x138>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40010400 	.word	0x40010400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	40001800 	.word	0x40001800
 80047dc:	40001c00 	.word	0x40001c00
 80047e0:	40002000 	.word	0x40002000

080047e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <TIM_OC1_SetConfig+0xd8>)
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 0302 	bic.w	r3, r3, #2
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <TIM_OC1_SetConfig+0xdc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC1_SetConfig+0x64>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <TIM_OC1_SetConfig+0xe0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10c      	bne.n	8004862 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0308 	bic.w	r3, r3, #8
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <TIM_OC1_SetConfig+0xdc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_OC1_SetConfig+0x8e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <TIM_OC1_SetConfig+0xe0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d111      	bne.n	8004896 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	fffeff8f 	.word	0xfffeff8f
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <TIM_OC2_SetConfig+0xe4>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC2_SetConfig+0x68>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <TIM_OC2_SetConfig+0xec>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10d      	bne.n	800494c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_OC2_SetConfig+0x94>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <TIM_OC2_SetConfig+0xec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d113      	bne.n	8004984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	feff8fff 	.word	0xfeff8fff
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40010400 	.word	0x40010400

080049b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <TIM_OC3_SetConfig+0xe0>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <TIM_OC3_SetConfig+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC3_SetConfig+0x66>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <TIM_OC3_SetConfig+0xe8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10d      	bne.n	8004a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <TIM_OC3_SetConfig+0xe4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_OC3_SetConfig+0x92>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <TIM_OC3_SetConfig+0xe8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d113      	bne.n	8004a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	fffeff8f 	.word	0xfffeff8f
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <TIM_OC4_SetConfig+0xa4>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	031b      	lsls	r3, r3, #12
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <TIM_OC4_SetConfig+0xa8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC4_SetConfig+0x68>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <TIM_OC4_SetConfig+0xac>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	feff8fff 	.word	0xfeff8fff
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400

08004b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <TIM_OC5_SetConfig+0x98>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <TIM_OC5_SetConfig+0x9c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC5_SetConfig+0x5e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <TIM_OC5_SetConfig+0xa0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d109      	bne.n	8004bc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	621a      	str	r2, [r3, #32]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	fffeff8f 	.word	0xfffeff8f
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <TIM_OC6_SetConfig+0x9c>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	051b      	lsls	r3, r3, #20
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <TIM_OC6_SetConfig+0xa0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_OC6_SetConfig+0x60>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <TIM_OC6_SetConfig+0xa4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d109      	bne.n	8004c6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	feff8fff 	.word	0xfeff8fff
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010400 	.word	0x40010400

08004ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0210 	bic.w	r2, r3, #16
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	031b      	lsls	r3, r3, #12
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f043 0307 	orr.w	r3, r3, #7
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e06d      	b.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10c      	bne.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40010400 	.word	0x40010400
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40001800 	.word	0x40001800

08004f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e065      	b.n	8005024 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d115      	bne.n	8005012 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	051b      	lsls	r3, r3, #20
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400

08005038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e040      	b.n	8005108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc faae 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2224      	movs	r2, #36	; 0x24
 80050a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8b0 	bl	8005218 <UART_SetConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e022      	b.n	8005108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fb08 	bl	80056e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fb8f 	bl	8005824 <UART_CheckIdleState>
 8005106:	4603      	mov	r3, r0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005124:	2b20      	cmp	r3, #32
 8005126:	d171      	bne.n	800520c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Transmit+0x24>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e06a      	b.n	800520e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2221      	movs	r2, #33	; 0x21
 8005144:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005146:	f7fc fbd9 	bl	80018fc <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005164:	d108      	bne.n	8005178 <HAL_UART_Transmit+0x68>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e003      	b.n	8005180 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005180:	e02c      	b.n	80051dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fb96 	bl	80058be <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e038      	b.n	800520e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3302      	adds	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e007      	b.n	80051ca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1cc      	bne.n	8005182 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	2140      	movs	r1, #64	; 0x40
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fb63 	bl	80058be <UART_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e005      	b.n	800520e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4ba6      	ldr	r3, [pc, #664]	; (80054dc <UART_SetConfig+0x2c4>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	430b      	orrs	r3, r1
 800524e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a94      	ldr	r2, [pc, #592]	; (80054e0 <UART_SetConfig+0x2c8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d120      	bne.n	80052d6 <UART_SetConfig+0xbe>
 8005294:	4b93      	ldr	r3, [pc, #588]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d816      	bhi.n	80052d0 <UART_SetConfig+0xb8>
 80052a2:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <UART_SetConfig+0x90>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052b9 	.word	0x080052b9
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052bf 	.word	0x080052bf
 80052b4:	080052cb 	.word	0x080052cb
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e150      	b.n	8005560 <UART_SetConfig+0x348>
 80052be:	2302      	movs	r3, #2
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e14d      	b.n	8005560 <UART_SetConfig+0x348>
 80052c4:	2304      	movs	r3, #4
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e14a      	b.n	8005560 <UART_SetConfig+0x348>
 80052ca:	2308      	movs	r3, #8
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e147      	b.n	8005560 <UART_SetConfig+0x348>
 80052d0:	2310      	movs	r3, #16
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e144      	b.n	8005560 <UART_SetConfig+0x348>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a83      	ldr	r2, [pc, #524]	; (80054e8 <UART_SetConfig+0x2d0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d132      	bne.n	8005346 <UART_SetConfig+0x12e>
 80052e0:	4b80      	ldr	r3, [pc, #512]	; (80054e4 <UART_SetConfig+0x2cc>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d828      	bhi.n	8005340 <UART_SetConfig+0x128>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0xdc>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005329 	.word	0x08005329
 80052f8:	08005341 	.word	0x08005341
 80052fc:	08005341 	.word	0x08005341
 8005300:	08005341 	.word	0x08005341
 8005304:	08005335 	.word	0x08005335
 8005308:	08005341 	.word	0x08005341
 800530c:	08005341 	.word	0x08005341
 8005310:	08005341 	.word	0x08005341
 8005314:	0800532f 	.word	0x0800532f
 8005318:	08005341 	.word	0x08005341
 800531c:	08005341 	.word	0x08005341
 8005320:	08005341 	.word	0x08005341
 8005324:	0800533b 	.word	0x0800533b
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e118      	b.n	8005560 <UART_SetConfig+0x348>
 800532e:	2302      	movs	r3, #2
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e115      	b.n	8005560 <UART_SetConfig+0x348>
 8005334:	2304      	movs	r3, #4
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e112      	b.n	8005560 <UART_SetConfig+0x348>
 800533a:	2308      	movs	r3, #8
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e10f      	b.n	8005560 <UART_SetConfig+0x348>
 8005340:	2310      	movs	r3, #16
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e10c      	b.n	8005560 <UART_SetConfig+0x348>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a68      	ldr	r2, [pc, #416]	; (80054ec <UART_SetConfig+0x2d4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d120      	bne.n	8005392 <UART_SetConfig+0x17a>
 8005350:	4b64      	ldr	r3, [pc, #400]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800535a:	2b30      	cmp	r3, #48	; 0x30
 800535c:	d013      	beq.n	8005386 <UART_SetConfig+0x16e>
 800535e:	2b30      	cmp	r3, #48	; 0x30
 8005360:	d814      	bhi.n	800538c <UART_SetConfig+0x174>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d009      	beq.n	800537a <UART_SetConfig+0x162>
 8005366:	2b20      	cmp	r3, #32
 8005368:	d810      	bhi.n	800538c <UART_SetConfig+0x174>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <UART_SetConfig+0x15c>
 800536e:	2b10      	cmp	r3, #16
 8005370:	d006      	beq.n	8005380 <UART_SetConfig+0x168>
 8005372:	e00b      	b.n	800538c <UART_SetConfig+0x174>
 8005374:	2300      	movs	r3, #0
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e0f2      	b.n	8005560 <UART_SetConfig+0x348>
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e0ef      	b.n	8005560 <UART_SetConfig+0x348>
 8005380:	2304      	movs	r3, #4
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e0ec      	b.n	8005560 <UART_SetConfig+0x348>
 8005386:	2308      	movs	r3, #8
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e0e9      	b.n	8005560 <UART_SetConfig+0x348>
 800538c:	2310      	movs	r3, #16
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e0e6      	b.n	8005560 <UART_SetConfig+0x348>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a56      	ldr	r2, [pc, #344]	; (80054f0 <UART_SetConfig+0x2d8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d120      	bne.n	80053de <UART_SetConfig+0x1c6>
 800539c:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <UART_SetConfig+0x2cc>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053a6:	2bc0      	cmp	r3, #192	; 0xc0
 80053a8:	d013      	beq.n	80053d2 <UART_SetConfig+0x1ba>
 80053aa:	2bc0      	cmp	r3, #192	; 0xc0
 80053ac:	d814      	bhi.n	80053d8 <UART_SetConfig+0x1c0>
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d009      	beq.n	80053c6 <UART_SetConfig+0x1ae>
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d810      	bhi.n	80053d8 <UART_SetConfig+0x1c0>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <UART_SetConfig+0x1a8>
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d006      	beq.n	80053cc <UART_SetConfig+0x1b4>
 80053be:	e00b      	b.n	80053d8 <UART_SetConfig+0x1c0>
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e0cc      	b.n	8005560 <UART_SetConfig+0x348>
 80053c6:	2302      	movs	r3, #2
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e0c9      	b.n	8005560 <UART_SetConfig+0x348>
 80053cc:	2304      	movs	r3, #4
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e0c6      	b.n	8005560 <UART_SetConfig+0x348>
 80053d2:	2308      	movs	r3, #8
 80053d4:	77fb      	strb	r3, [r7, #31]
 80053d6:	e0c3      	b.n	8005560 <UART_SetConfig+0x348>
 80053d8:	2310      	movs	r3, #16
 80053da:	77fb      	strb	r3, [r7, #31]
 80053dc:	e0c0      	b.n	8005560 <UART_SetConfig+0x348>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a44      	ldr	r2, [pc, #272]	; (80054f4 <UART_SetConfig+0x2dc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d125      	bne.n	8005434 <UART_SetConfig+0x21c>
 80053e8:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <UART_SetConfig+0x2cc>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f6:	d017      	beq.n	8005428 <UART_SetConfig+0x210>
 80053f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fc:	d817      	bhi.n	800542e <UART_SetConfig+0x216>
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005402:	d00b      	beq.n	800541c <UART_SetConfig+0x204>
 8005404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005408:	d811      	bhi.n	800542e <UART_SetConfig+0x216>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <UART_SetConfig+0x1fe>
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	d006      	beq.n	8005422 <UART_SetConfig+0x20a>
 8005414:	e00b      	b.n	800542e <UART_SetConfig+0x216>
 8005416:	2300      	movs	r3, #0
 8005418:	77fb      	strb	r3, [r7, #31]
 800541a:	e0a1      	b.n	8005560 <UART_SetConfig+0x348>
 800541c:	2302      	movs	r3, #2
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e09e      	b.n	8005560 <UART_SetConfig+0x348>
 8005422:	2304      	movs	r3, #4
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e09b      	b.n	8005560 <UART_SetConfig+0x348>
 8005428:	2308      	movs	r3, #8
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e098      	b.n	8005560 <UART_SetConfig+0x348>
 800542e:	2310      	movs	r3, #16
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e095      	b.n	8005560 <UART_SetConfig+0x348>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2f      	ldr	r2, [pc, #188]	; (80054f8 <UART_SetConfig+0x2e0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d125      	bne.n	800548a <UART_SetConfig+0x272>
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800544c:	d017      	beq.n	800547e <UART_SetConfig+0x266>
 800544e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005452:	d817      	bhi.n	8005484 <UART_SetConfig+0x26c>
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005458:	d00b      	beq.n	8005472 <UART_SetConfig+0x25a>
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545e:	d811      	bhi.n	8005484 <UART_SetConfig+0x26c>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <UART_SetConfig+0x254>
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d006      	beq.n	8005478 <UART_SetConfig+0x260>
 800546a:	e00b      	b.n	8005484 <UART_SetConfig+0x26c>
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e076      	b.n	8005560 <UART_SetConfig+0x348>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e073      	b.n	8005560 <UART_SetConfig+0x348>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e070      	b.n	8005560 <UART_SetConfig+0x348>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e06d      	b.n	8005560 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e06a      	b.n	8005560 <UART_SetConfig+0x348>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <UART_SetConfig+0x2e4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d138      	bne.n	8005506 <UART_SetConfig+0x2ee>
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <UART_SetConfig+0x2cc>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800549e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054a2:	d017      	beq.n	80054d4 <UART_SetConfig+0x2bc>
 80054a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054a8:	d82a      	bhi.n	8005500 <UART_SetConfig+0x2e8>
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ae:	d00b      	beq.n	80054c8 <UART_SetConfig+0x2b0>
 80054b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b4:	d824      	bhi.n	8005500 <UART_SetConfig+0x2e8>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <UART_SetConfig+0x2aa>
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054be:	d006      	beq.n	80054ce <UART_SetConfig+0x2b6>
 80054c0:	e01e      	b.n	8005500 <UART_SetConfig+0x2e8>
 80054c2:	2300      	movs	r3, #0
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e04b      	b.n	8005560 <UART_SetConfig+0x348>
 80054c8:	2302      	movs	r3, #2
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e048      	b.n	8005560 <UART_SetConfig+0x348>
 80054ce:	2304      	movs	r3, #4
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e045      	b.n	8005560 <UART_SetConfig+0x348>
 80054d4:	2308      	movs	r3, #8
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e042      	b.n	8005560 <UART_SetConfig+0x348>
 80054da:	bf00      	nop
 80054dc:	efff69f3 	.word	0xefff69f3
 80054e0:	40011000 	.word	0x40011000
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40004800 	.word	0x40004800
 80054f0:	40004c00 	.word	0x40004c00
 80054f4:	40005000 	.word	0x40005000
 80054f8:	40011400 	.word	0x40011400
 80054fc:	40007800 	.word	0x40007800
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e02c      	b.n	8005560 <UART_SetConfig+0x348>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a72      	ldr	r2, [pc, #456]	; (80056d4 <UART_SetConfig+0x4bc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d125      	bne.n	800555c <UART_SetConfig+0x344>
 8005510:	4b71      	ldr	r3, [pc, #452]	; (80056d8 <UART_SetConfig+0x4c0>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800551a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800551e:	d017      	beq.n	8005550 <UART_SetConfig+0x338>
 8005520:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005524:	d817      	bhi.n	8005556 <UART_SetConfig+0x33e>
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552a:	d00b      	beq.n	8005544 <UART_SetConfig+0x32c>
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005530:	d811      	bhi.n	8005556 <UART_SetConfig+0x33e>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <UART_SetConfig+0x326>
 8005536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553a:	d006      	beq.n	800554a <UART_SetConfig+0x332>
 800553c:	e00b      	b.n	8005556 <UART_SetConfig+0x33e>
 800553e:	2300      	movs	r3, #0
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e00d      	b.n	8005560 <UART_SetConfig+0x348>
 8005544:	2302      	movs	r3, #2
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e00a      	b.n	8005560 <UART_SetConfig+0x348>
 800554a:	2304      	movs	r3, #4
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e007      	b.n	8005560 <UART_SetConfig+0x348>
 8005550:	2308      	movs	r3, #8
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e004      	b.n	8005560 <UART_SetConfig+0x348>
 8005556:	2310      	movs	r3, #16
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e001      	b.n	8005560 <UART_SetConfig+0x348>
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005568:	d15b      	bne.n	8005622 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800556a:	7ffb      	ldrb	r3, [r7, #31]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d828      	bhi.n	80055c2 <UART_SetConfig+0x3aa>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x360>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055a5 	.word	0x080055a5
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055c3 	.word	0x080055c3
 8005588:	080055b3 	.word	0x080055b3
 800558c:	080055c3 	.word	0x080055c3
 8005590:	080055c3 	.word	0x080055c3
 8005594:	080055c3 	.word	0x080055c3
 8005598:	080055bb 	.word	0x080055bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559c:	f7fd fee0 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 80055a0:	61b8      	str	r0, [r7, #24]
        break;
 80055a2:	e013      	b.n	80055cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7fd fef0 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 80055a8:	61b8      	str	r0, [r7, #24]
        break;
 80055aa:	e00f      	b.n	80055cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ac:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <UART_SetConfig+0x4c4>)
 80055ae:	61bb      	str	r3, [r7, #24]
        break;
 80055b0:	e00c      	b.n	80055cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b2:	f7fd fdc3 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80055b6:	61b8      	str	r0, [r7, #24]
        break;
 80055b8:	e008      	b.n	80055cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	61bb      	str	r3, [r7, #24]
        break;
 80055c0:	e004      	b.n	80055cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	77bb      	strb	r3, [r7, #30]
        break;
 80055ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d074      	beq.n	80056bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	005a      	lsls	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d916      	bls.n	800561c <UART_SetConfig+0x404>
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d212      	bcs.n	800561c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f023 030f 	bic.w	r3, r3, #15
 80055fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	b29b      	uxth	r3, r3
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	b29a      	uxth	r2, r3
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	4313      	orrs	r3, r2
 8005610:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	89fa      	ldrh	r2, [r7, #14]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e04f      	b.n	80056bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	77bb      	strb	r3, [r7, #30]
 8005620:	e04c      	b.n	80056bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005622:	7ffb      	ldrb	r3, [r7, #31]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d828      	bhi.n	800567a <UART_SetConfig+0x462>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x418>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800567b 	.word	0x0800567b
 8005640:	0800566b 	.word	0x0800566b
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800567b 	.word	0x0800567b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7fd fe84 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8005658:	61b8      	str	r0, [r7, #24]
        break;
 800565a:	e013      	b.n	8005684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fd fe94 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 8005660:	61b8      	str	r0, [r7, #24]
        break;
 8005662:	e00f      	b.n	8005684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <UART_SetConfig+0x4c4>)
 8005666:	61bb      	str	r3, [r7, #24]
        break;
 8005668:	e00c      	b.n	8005684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7fd fd67 	bl	800313c <HAL_RCC_GetSysClockFreq>
 800566e:	61b8      	str	r0, [r7, #24]
        break;
 8005670:	e008      	b.n	8005684 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	61bb      	str	r3, [r7, #24]
        break;
 8005678:	e004      	b.n	8005684 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	77bb      	strb	r3, [r7, #30]
        break;
 8005682:	bf00      	nop
    }

    if (pclk != 0U)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085a      	lsrs	r2, r3, #1
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	fbb2 f3f3 	udiv	r3, r2, r3
 800569c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b0f      	cmp	r3, #15
 80056a2:	d909      	bls.n	80056b8 <UART_SetConfig+0x4a0>
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d205      	bcs.n	80056b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	e001      	b.n	80056bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40007c00 	.word	0x40007c00
 80056d8:	40023800 	.word	0x40023800
 80056dc:	00f42400 	.word	0x00f42400

080056e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057de:	d10a      	bne.n	80057f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af02      	add	r7, sp, #8
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005834:	f7fc f862 	bl	80018fc <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b08      	cmp	r3, #8
 8005846:	d10e      	bne.n	8005866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f831 	bl	80058be <UART_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e027      	b.n	80058b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d10e      	bne.n	8005892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f81b 	bl	80058be <UART_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e011      	b.n	80058b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b09c      	sub	sp, #112	; 0x70
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	603b      	str	r3, [r7, #0]
 80058ca:	4613      	mov	r3, r2
 80058cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	e0a7      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	f000 80a3 	beq.w	8005a20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058da:	f7fc f80f 	bl	80018fc <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d13f      	bne.n	8005970 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005904:	667b      	str	r3, [r7, #100]	; 0x64
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005910:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	663b      	str	r3, [r7, #96]	; 0x60
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005942:	64ba      	str	r2, [r7, #72]	; 0x48
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e068      	b.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d050      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598c:	d148      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005996:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
 80059b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	613b      	str	r3, [r7, #16]
   return(result);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ea:	623a      	str	r2, [r7, #32]
 80059ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	69f9      	ldr	r1, [r7, #28]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e010      	b.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f43f af48 	beq.w	80058d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3770      	adds	r7, #112	; 0x70
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	f107 001c 	add.w	r0, r7, #28
 8005a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d120      	bne.n	8005aa6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <USB_CoreInit+0xac>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa96 	bl	8005fcc <USB_CoreReset>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e010      	b.n	8005ac8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa8a 	bl	8005fcc <USB_CoreReset>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d10b      	bne.n	8005ae6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f043 0206 	orr.w	r2, r3, #6
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005af2:	b004      	add	sp, #16
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	ffbdffbf 	.word	0xffbdffbf

08005afc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 0201 	bic.w	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d115      	bne.n	8005b6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f7fb fee1 	bl	8001914 <HAL_Delay>
      ms++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa29 	bl	8005fb0 <USB_GetMode>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d01e      	beq.n	8005ba2 <USB_SetCurrentMode+0x84>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b31      	cmp	r3, #49	; 0x31
 8005b68:	d9f0      	bls.n	8005b4c <USB_SetCurrentMode+0x2e>
 8005b6a:	e01a      	b.n	8005ba2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d115      	bne.n	8005b9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b7e:	2001      	movs	r0, #1
 8005b80:	f7fb fec8 	bl	8001914 <HAL_Delay>
      ms++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa10 	bl	8005fb0 <USB_GetMode>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <USB_SetCurrentMode+0x84>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b31      	cmp	r3, #49	; 0x31
 8005b9a:	d9f0      	bls.n	8005b7e <USB_SetCurrentMode+0x60>
 8005b9c:	e001      	b.n	8005ba2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e005      	b.n	8005bae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b32      	cmp	r3, #50	; 0x32
 8005ba6:	d101      	bne.n	8005bac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb8:	b084      	sub	sp, #16
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	e009      	b.n	8005bec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3340      	adds	r3, #64	; 0x40
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3301      	adds	r3, #1
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b0e      	cmp	r3, #14
 8005bf0:	d9f2      	bls.n	8005bd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11c      	bne.n	8005c32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c06:	f043 0302 	orr.w	r3, r3, #2
 8005c0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e005      	b.n	8005c3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c44:	461a      	mov	r2, r3
 8005c46:	2300      	movs	r3, #0
 8005c48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	4619      	mov	r1, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	461a      	mov	r2, r3
 8005c5a:	680b      	ldr	r3, [r1, #0]
 8005c5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10c      	bne.n	8005c7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f965 	bl	8005f3c <USB_SetDevSpeed>
 8005c72:	e008      	b.n	8005c86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c74:	2101      	movs	r1, #1
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f960 	bl	8005f3c <USB_SetDevSpeed>
 8005c7c:	e003      	b.n	8005c86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c7e:	2103      	movs	r1, #3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f95b 	bl	8005f3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c86:	2110      	movs	r1, #16
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8f3 	bl	8005e74 <USB_FlushTxFifo>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f91f 	bl	8005edc <USB_FlushRxFifo>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	e043      	b.n	8005d5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce8:	d118      	bne.n	8005d1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e013      	b.n	8005d2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	461a      	mov	r2, r3
 8005d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e008      	b.n	8005d2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3301      	adds	r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3b7      	bcc.n	8005cd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e043      	b.n	8005df0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7e:	d118      	bne.n	8005db2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	461a      	mov	r2, r3
 8005d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e013      	b.n	8005dc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	461a      	mov	r2, r3
 8005daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e008      	b.n	8005dc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3301      	adds	r3, #1
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3b7      	bcc.n	8005d68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f043 0210 	orr.w	r2, r3, #16
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <USB_DevInit+0x2b4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f043 0208 	orr.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <USB_DevInit+0x2b8>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e68:	b004      	add	sp, #16
 8005e6a:	4770      	bx	lr
 8005e6c:	803c3800 	.word	0x803c3800
 8005e70:	40000004 	.word	0x40000004

08005e74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <USB_FlushTxFifo+0x64>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e01b      	b.n	8005ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	daf2      	bge.n	8005e82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	019b      	lsls	r3, r3, #6
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <USB_FlushTxFifo+0x64>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e006      	b.n	8005ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d0f0      	beq.n	8005eac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	00030d40 	.word	0x00030d40

08005edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a11      	ldr	r2, [pc, #68]	; (8005f38 <USB_FlushRxFifo+0x5c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e018      	b.n	8005f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	daf2      	bge.n	8005ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <USB_FlushRxFifo+0x5c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e006      	b.n	8005f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d0f0      	beq.n	8005f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	00030d40 	.word	0x00030d40

08005f3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a13      	ldr	r2, [pc, #76]	; (8006030 <USB_CoreReset+0x64>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e01b      	b.n	8006022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	daf2      	bge.n	8005fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f043 0201 	orr.w	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <USB_CoreReset+0x64>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d0f0      	beq.n	8006002 <USB_CoreReset+0x36>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	00030d40 	.word	0x00030d40

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	200001f8 	.word	0x200001f8

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4d0d      	ldr	r5, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2600      	movs	r6, #0
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4d0b      	ldr	r5, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f001 f824 	bl	80070a0 <_init>
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2600      	movs	r6, #0
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	08007258 	.word	0x08007258
 800607c:	08007258 	.word	0x08007258
 8006080:	08007258 	.word	0x08007258
 8006084:	0800725c 	.word	0x0800725c

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <iprintf>:
 8006098:	b40f      	push	{r0, r1, r2, r3}
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <iprintf+0x2c>)
 800609c:	b513      	push	{r0, r1, r4, lr}
 800609e:	681c      	ldr	r4, [r3, #0]
 80060a0:	b124      	cbz	r4, 80060ac <iprintf+0x14>
 80060a2:	69a3      	ldr	r3, [r4, #24]
 80060a4:	b913      	cbnz	r3, 80060ac <iprintf+0x14>
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fa5e 	bl	8006568 <__sinit>
 80060ac:	ab05      	add	r3, sp, #20
 80060ae:	9a04      	ldr	r2, [sp, #16]
 80060b0:	68a1      	ldr	r1, [r4, #8]
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fc67 	bl	8006988 <_vfiprintf_r>
 80060ba:	b002      	add	sp, #8
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	b004      	add	sp, #16
 80060c2:	4770      	bx	lr
 80060c4:	200001f8 	.word	0x200001f8

080060c8 <_puts_r>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	460e      	mov	r6, r1
 80060cc:	4605      	mov	r5, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_puts_r+0x10>
 80060d0:	6983      	ldr	r3, [r0, #24]
 80060d2:	b90b      	cbnz	r3, 80060d8 <_puts_r+0x10>
 80060d4:	f000 fa48 	bl	8006568 <__sinit>
 80060d8:	69ab      	ldr	r3, [r5, #24]
 80060da:	68ac      	ldr	r4, [r5, #8]
 80060dc:	b913      	cbnz	r3, 80060e4 <_puts_r+0x1c>
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 fa42 	bl	8006568 <__sinit>
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <_puts_r+0xd0>)
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d120      	bne.n	800612c <_puts_r+0x64>
 80060ea:	686c      	ldr	r4, [r5, #4]
 80060ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ee:	07db      	lsls	r3, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_puts_r+0x36>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0598      	lsls	r0, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_puts_r+0x36>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f000 fad3 	bl	80066a4 <__retarget_lock_acquire_recursive>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	0719      	lsls	r1, r3, #28
 8006102:	d51d      	bpl.n	8006140 <_puts_r+0x78>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	b1db      	cbz	r3, 8006140 <_puts_r+0x78>
 8006108:	3e01      	subs	r6, #1
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006110:	3b01      	subs	r3, #1
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	bb39      	cbnz	r1, 8006166 <_puts_r+0x9e>
 8006116:	2b00      	cmp	r3, #0
 8006118:	da38      	bge.n	800618c <_puts_r+0xc4>
 800611a:	4622      	mov	r2, r4
 800611c:	210a      	movs	r1, #10
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f848 	bl	80061b4 <__swbuf_r>
 8006124:	3001      	adds	r0, #1
 8006126:	d011      	beq.n	800614c <_puts_r+0x84>
 8006128:	250a      	movs	r5, #10
 800612a:	e011      	b.n	8006150 <_puts_r+0x88>
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <_puts_r+0xd4>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d101      	bne.n	8006136 <_puts_r+0x6e>
 8006132:	68ac      	ldr	r4, [r5, #8]
 8006134:	e7da      	b.n	80060ec <_puts_r+0x24>
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <_puts_r+0xd8>)
 8006138:	429c      	cmp	r4, r3
 800613a:	bf08      	it	eq
 800613c:	68ec      	ldreq	r4, [r5, #12]
 800613e:	e7d5      	b.n	80060ec <_puts_r+0x24>
 8006140:	4621      	mov	r1, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f888 	bl	8006258 <__swsetup_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	d0dd      	beq.n	8006108 <_puts_r+0x40>
 800614c:	f04f 35ff 	mov.w	r5, #4294967295
 8006150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006152:	07da      	lsls	r2, r3, #31
 8006154:	d405      	bmi.n	8006162 <_puts_r+0x9a>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	059b      	lsls	r3, r3, #22
 800615a:	d402      	bmi.n	8006162 <_puts_r+0x9a>
 800615c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615e:	f000 faa2 	bl	80066a6 <__retarget_lock_release_recursive>
 8006162:	4628      	mov	r0, r5
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	2b00      	cmp	r3, #0
 8006168:	da04      	bge.n	8006174 <_puts_r+0xac>
 800616a:	69a2      	ldr	r2, [r4, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	dc06      	bgt.n	800617e <_puts_r+0xb6>
 8006170:	290a      	cmp	r1, #10
 8006172:	d004      	beq.n	800617e <_puts_r+0xb6>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	7019      	strb	r1, [r3, #0]
 800617c:	e7c5      	b.n	800610a <_puts_r+0x42>
 800617e:	4622      	mov	r2, r4
 8006180:	4628      	mov	r0, r5
 8006182:	f000 f817 	bl	80061b4 <__swbuf_r>
 8006186:	3001      	adds	r0, #1
 8006188:	d1bf      	bne.n	800610a <_puts_r+0x42>
 800618a:	e7df      	b.n	800614c <_puts_r+0x84>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	250a      	movs	r5, #10
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	701d      	strb	r5, [r3, #0]
 8006196:	e7db      	b.n	8006150 <_puts_r+0x88>
 8006198:	080071dc 	.word	0x080071dc
 800619c:	080071fc 	.word	0x080071fc
 80061a0:	080071bc 	.word	0x080071bc

080061a4 <puts>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <puts+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f7ff bf8d 	b.w	80060c8 <_puts_r>
 80061ae:	bf00      	nop
 80061b0:	200001f8 	.word	0x200001f8

080061b4 <__swbuf_r>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	460e      	mov	r6, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	4605      	mov	r5, r0
 80061bc:	b118      	cbz	r0, 80061c6 <__swbuf_r+0x12>
 80061be:	6983      	ldr	r3, [r0, #24]
 80061c0:	b90b      	cbnz	r3, 80061c6 <__swbuf_r+0x12>
 80061c2:	f000 f9d1 	bl	8006568 <__sinit>
 80061c6:	4b21      	ldr	r3, [pc, #132]	; (800624c <__swbuf_r+0x98>)
 80061c8:	429c      	cmp	r4, r3
 80061ca:	d12b      	bne.n	8006224 <__swbuf_r+0x70>
 80061cc:	686c      	ldr	r4, [r5, #4]
 80061ce:	69a3      	ldr	r3, [r4, #24]
 80061d0:	60a3      	str	r3, [r4, #8]
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	071a      	lsls	r2, r3, #28
 80061d6:	d52f      	bpl.n	8006238 <__swbuf_r+0x84>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	b36b      	cbz	r3, 8006238 <__swbuf_r+0x84>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	6963      	ldr	r3, [r4, #20]
 80061e4:	b2f6      	uxtb	r6, r6
 80061e6:	4283      	cmp	r3, r0
 80061e8:	4637      	mov	r7, r6
 80061ea:	dc04      	bgt.n	80061f6 <__swbuf_r+0x42>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f926 	bl	8006440 <_fflush_r>
 80061f4:	bb30      	cbnz	r0, 8006244 <__swbuf_r+0x90>
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	60a3      	str	r3, [r4, #8]
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	6022      	str	r2, [r4, #0]
 8006202:	701e      	strb	r6, [r3, #0]
 8006204:	6963      	ldr	r3, [r4, #20]
 8006206:	3001      	adds	r0, #1
 8006208:	4283      	cmp	r3, r0
 800620a:	d004      	beq.n	8006216 <__swbuf_r+0x62>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	07db      	lsls	r3, r3, #31
 8006210:	d506      	bpl.n	8006220 <__swbuf_r+0x6c>
 8006212:	2e0a      	cmp	r6, #10
 8006214:	d104      	bne.n	8006220 <__swbuf_r+0x6c>
 8006216:	4621      	mov	r1, r4
 8006218:	4628      	mov	r0, r5
 800621a:	f000 f911 	bl	8006440 <_fflush_r>
 800621e:	b988      	cbnz	r0, 8006244 <__swbuf_r+0x90>
 8006220:	4638      	mov	r0, r7
 8006222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <__swbuf_r+0x9c>)
 8006226:	429c      	cmp	r4, r3
 8006228:	d101      	bne.n	800622e <__swbuf_r+0x7a>
 800622a:	68ac      	ldr	r4, [r5, #8]
 800622c:	e7cf      	b.n	80061ce <__swbuf_r+0x1a>
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <__swbuf_r+0xa0>)
 8006230:	429c      	cmp	r4, r3
 8006232:	bf08      	it	eq
 8006234:	68ec      	ldreq	r4, [r5, #12]
 8006236:	e7ca      	b.n	80061ce <__swbuf_r+0x1a>
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f000 f80c 	bl	8006258 <__swsetup_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	d0cb      	beq.n	80061dc <__swbuf_r+0x28>
 8006244:	f04f 37ff 	mov.w	r7, #4294967295
 8006248:	e7ea      	b.n	8006220 <__swbuf_r+0x6c>
 800624a:	bf00      	nop
 800624c:	080071dc 	.word	0x080071dc
 8006250:	080071fc 	.word	0x080071fc
 8006254:	080071bc 	.word	0x080071bc

08006258 <__swsetup_r>:
 8006258:	4b32      	ldr	r3, [pc, #200]	; (8006324 <__swsetup_r+0xcc>)
 800625a:	b570      	push	{r4, r5, r6, lr}
 800625c:	681d      	ldr	r5, [r3, #0]
 800625e:	4606      	mov	r6, r0
 8006260:	460c      	mov	r4, r1
 8006262:	b125      	cbz	r5, 800626e <__swsetup_r+0x16>
 8006264:	69ab      	ldr	r3, [r5, #24]
 8006266:	b913      	cbnz	r3, 800626e <__swsetup_r+0x16>
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f97d 	bl	8006568 <__sinit>
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <__swsetup_r+0xd0>)
 8006270:	429c      	cmp	r4, r3
 8006272:	d10f      	bne.n	8006294 <__swsetup_r+0x3c>
 8006274:	686c      	ldr	r4, [r5, #4]
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800627c:	0719      	lsls	r1, r3, #28
 800627e:	d42c      	bmi.n	80062da <__swsetup_r+0x82>
 8006280:	06dd      	lsls	r5, r3, #27
 8006282:	d411      	bmi.n	80062a8 <__swsetup_r+0x50>
 8006284:	2309      	movs	r3, #9
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	f04f 30ff 	mov.w	r0, #4294967295
 8006292:	e03e      	b.n	8006312 <__swsetup_r+0xba>
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <__swsetup_r+0xd4>)
 8006296:	429c      	cmp	r4, r3
 8006298:	d101      	bne.n	800629e <__swsetup_r+0x46>
 800629a:	68ac      	ldr	r4, [r5, #8]
 800629c:	e7eb      	b.n	8006276 <__swsetup_r+0x1e>
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <__swsetup_r+0xd8>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	bf08      	it	eq
 80062a4:	68ec      	ldreq	r4, [r5, #12]
 80062a6:	e7e6      	b.n	8006276 <__swsetup_r+0x1e>
 80062a8:	0758      	lsls	r0, r3, #29
 80062aa:	d512      	bpl.n	80062d2 <__swsetup_r+0x7a>
 80062ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ae:	b141      	cbz	r1, 80062c2 <__swsetup_r+0x6a>
 80062b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062b4:	4299      	cmp	r1, r3
 80062b6:	d002      	beq.n	80062be <__swsetup_r+0x66>
 80062b8:	4630      	mov	r0, r6
 80062ba:	f000 fa5b 	bl	8006774 <_free_r>
 80062be:	2300      	movs	r3, #0
 80062c0:	6363      	str	r3, [r4, #52]	; 0x34
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f043 0308 	orr.w	r3, r3, #8
 80062d8:	81a3      	strh	r3, [r4, #12]
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	b94b      	cbnz	r3, 80062f2 <__swsetup_r+0x9a>
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e8:	d003      	beq.n	80062f2 <__swsetup_r+0x9a>
 80062ea:	4621      	mov	r1, r4
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 fa01 	bl	80066f4 <__smakebuf_r>
 80062f2:	89a0      	ldrh	r0, [r4, #12]
 80062f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062f8:	f010 0301 	ands.w	r3, r0, #1
 80062fc:	d00a      	beq.n	8006314 <__swsetup_r+0xbc>
 80062fe:	2300      	movs	r3, #0
 8006300:	60a3      	str	r3, [r4, #8]
 8006302:	6963      	ldr	r3, [r4, #20]
 8006304:	425b      	negs	r3, r3
 8006306:	61a3      	str	r3, [r4, #24]
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	b943      	cbnz	r3, 800631e <__swsetup_r+0xc6>
 800630c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006310:	d1ba      	bne.n	8006288 <__swsetup_r+0x30>
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	0781      	lsls	r1, r0, #30
 8006316:	bf58      	it	pl
 8006318:	6963      	ldrpl	r3, [r4, #20]
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	e7f4      	b.n	8006308 <__swsetup_r+0xb0>
 800631e:	2000      	movs	r0, #0
 8006320:	e7f7      	b.n	8006312 <__swsetup_r+0xba>
 8006322:	bf00      	nop
 8006324:	200001f8 	.word	0x200001f8
 8006328:	080071dc 	.word	0x080071dc
 800632c:	080071fc 	.word	0x080071fc
 8006330:	080071bc 	.word	0x080071bc

08006334 <__sflush_r>:
 8006334:	898a      	ldrh	r2, [r1, #12]
 8006336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633a:	4605      	mov	r5, r0
 800633c:	0710      	lsls	r0, r2, #28
 800633e:	460c      	mov	r4, r1
 8006340:	d458      	bmi.n	80063f4 <__sflush_r+0xc0>
 8006342:	684b      	ldr	r3, [r1, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc05      	bgt.n	8006354 <__sflush_r+0x20>
 8006348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	dc02      	bgt.n	8006354 <__sflush_r+0x20>
 800634e:	2000      	movs	r0, #0
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006356:	2e00      	cmp	r6, #0
 8006358:	d0f9      	beq.n	800634e <__sflush_r+0x1a>
 800635a:	2300      	movs	r3, #0
 800635c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006360:	682f      	ldr	r7, [r5, #0]
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	d032      	beq.n	80063cc <__sflush_r+0x98>
 8006366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	075a      	lsls	r2, r3, #29
 800636c:	d505      	bpl.n	800637a <__sflush_r+0x46>
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	1ac0      	subs	r0, r0, r3
 8006372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006374:	b10b      	cbz	r3, 800637a <__sflush_r+0x46>
 8006376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006378:	1ac0      	subs	r0, r0, r3
 800637a:	2300      	movs	r3, #0
 800637c:	4602      	mov	r2, r0
 800637e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006380:	6a21      	ldr	r1, [r4, #32]
 8006382:	4628      	mov	r0, r5
 8006384:	47b0      	blx	r6
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	d106      	bne.n	800639a <__sflush_r+0x66>
 800638c:	6829      	ldr	r1, [r5, #0]
 800638e:	291d      	cmp	r1, #29
 8006390:	d82c      	bhi.n	80063ec <__sflush_r+0xb8>
 8006392:	4a2a      	ldr	r2, [pc, #168]	; (800643c <__sflush_r+0x108>)
 8006394:	40ca      	lsrs	r2, r1
 8006396:	07d6      	lsls	r6, r2, #31
 8006398:	d528      	bpl.n	80063ec <__sflush_r+0xb8>
 800639a:	2200      	movs	r2, #0
 800639c:	6062      	str	r2, [r4, #4]
 800639e:	04d9      	lsls	r1, r3, #19
 80063a0:	6922      	ldr	r2, [r4, #16]
 80063a2:	6022      	str	r2, [r4, #0]
 80063a4:	d504      	bpl.n	80063b0 <__sflush_r+0x7c>
 80063a6:	1c42      	adds	r2, r0, #1
 80063a8:	d101      	bne.n	80063ae <__sflush_r+0x7a>
 80063aa:	682b      	ldr	r3, [r5, #0]
 80063ac:	b903      	cbnz	r3, 80063b0 <__sflush_r+0x7c>
 80063ae:	6560      	str	r0, [r4, #84]	; 0x54
 80063b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b2:	602f      	str	r7, [r5, #0]
 80063b4:	2900      	cmp	r1, #0
 80063b6:	d0ca      	beq.n	800634e <__sflush_r+0x1a>
 80063b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063bc:	4299      	cmp	r1, r3
 80063be:	d002      	beq.n	80063c6 <__sflush_r+0x92>
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 f9d7 	bl	8006774 <_free_r>
 80063c6:	2000      	movs	r0, #0
 80063c8:	6360      	str	r0, [r4, #52]	; 0x34
 80063ca:	e7c1      	b.n	8006350 <__sflush_r+0x1c>
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	2301      	movs	r3, #1
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b0      	blx	r6
 80063d4:	1c41      	adds	r1, r0, #1
 80063d6:	d1c7      	bne.n	8006368 <__sflush_r+0x34>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0c4      	beq.n	8006368 <__sflush_r+0x34>
 80063de:	2b1d      	cmp	r3, #29
 80063e0:	d001      	beq.n	80063e6 <__sflush_r+0xb2>
 80063e2:	2b16      	cmp	r3, #22
 80063e4:	d101      	bne.n	80063ea <__sflush_r+0xb6>
 80063e6:	602f      	str	r7, [r5, #0]
 80063e8:	e7b1      	b.n	800634e <__sflush_r+0x1a>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	e7ad      	b.n	8006350 <__sflush_r+0x1c>
 80063f4:	690f      	ldr	r7, [r1, #16]
 80063f6:	2f00      	cmp	r7, #0
 80063f8:	d0a9      	beq.n	800634e <__sflush_r+0x1a>
 80063fa:	0793      	lsls	r3, r2, #30
 80063fc:	680e      	ldr	r6, [r1, #0]
 80063fe:	bf08      	it	eq
 8006400:	694b      	ldreq	r3, [r1, #20]
 8006402:	600f      	str	r7, [r1, #0]
 8006404:	bf18      	it	ne
 8006406:	2300      	movne	r3, #0
 8006408:	eba6 0807 	sub.w	r8, r6, r7
 800640c:	608b      	str	r3, [r1, #8]
 800640e:	f1b8 0f00 	cmp.w	r8, #0
 8006412:	dd9c      	ble.n	800634e <__sflush_r+0x1a>
 8006414:	6a21      	ldr	r1, [r4, #32]
 8006416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006418:	4643      	mov	r3, r8
 800641a:	463a      	mov	r2, r7
 800641c:	4628      	mov	r0, r5
 800641e:	47b0      	blx	r6
 8006420:	2800      	cmp	r0, #0
 8006422:	dc06      	bgt.n	8006432 <__sflush_r+0xfe>
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	e78e      	b.n	8006350 <__sflush_r+0x1c>
 8006432:	4407      	add	r7, r0
 8006434:	eba8 0800 	sub.w	r8, r8, r0
 8006438:	e7e9      	b.n	800640e <__sflush_r+0xda>
 800643a:	bf00      	nop
 800643c:	20400001 	.word	0x20400001

08006440 <_fflush_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	690b      	ldr	r3, [r1, #16]
 8006444:	4605      	mov	r5, r0
 8006446:	460c      	mov	r4, r1
 8006448:	b913      	cbnz	r3, 8006450 <_fflush_r+0x10>
 800644a:	2500      	movs	r5, #0
 800644c:	4628      	mov	r0, r5
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	b118      	cbz	r0, 800645a <_fflush_r+0x1a>
 8006452:	6983      	ldr	r3, [r0, #24]
 8006454:	b90b      	cbnz	r3, 800645a <_fflush_r+0x1a>
 8006456:	f000 f887 	bl	8006568 <__sinit>
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <_fflush_r+0x6c>)
 800645c:	429c      	cmp	r4, r3
 800645e:	d11b      	bne.n	8006498 <_fflush_r+0x58>
 8006460:	686c      	ldr	r4, [r5, #4]
 8006462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0ef      	beq.n	800644a <_fflush_r+0xa>
 800646a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800646c:	07d0      	lsls	r0, r2, #31
 800646e:	d404      	bmi.n	800647a <_fflush_r+0x3a>
 8006470:	0599      	lsls	r1, r3, #22
 8006472:	d402      	bmi.n	800647a <_fflush_r+0x3a>
 8006474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006476:	f000 f915 	bl	80066a4 <__retarget_lock_acquire_recursive>
 800647a:	4628      	mov	r0, r5
 800647c:	4621      	mov	r1, r4
 800647e:	f7ff ff59 	bl	8006334 <__sflush_r>
 8006482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006484:	07da      	lsls	r2, r3, #31
 8006486:	4605      	mov	r5, r0
 8006488:	d4e0      	bmi.n	800644c <_fflush_r+0xc>
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	059b      	lsls	r3, r3, #22
 800648e:	d4dd      	bmi.n	800644c <_fflush_r+0xc>
 8006490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006492:	f000 f908 	bl	80066a6 <__retarget_lock_release_recursive>
 8006496:	e7d9      	b.n	800644c <_fflush_r+0xc>
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <_fflush_r+0x70>)
 800649a:	429c      	cmp	r4, r3
 800649c:	d101      	bne.n	80064a2 <_fflush_r+0x62>
 800649e:	68ac      	ldr	r4, [r5, #8]
 80064a0:	e7df      	b.n	8006462 <_fflush_r+0x22>
 80064a2:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <_fflush_r+0x74>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	bf08      	it	eq
 80064a8:	68ec      	ldreq	r4, [r5, #12]
 80064aa:	e7da      	b.n	8006462 <_fflush_r+0x22>
 80064ac:	080071dc 	.word	0x080071dc
 80064b0:	080071fc 	.word	0x080071fc
 80064b4:	080071bc 	.word	0x080071bc

080064b8 <std>:
 80064b8:	2300      	movs	r3, #0
 80064ba:	b510      	push	{r4, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	e9c0 3300 	strd	r3, r3, [r0]
 80064c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c6:	6083      	str	r3, [r0, #8]
 80064c8:	8181      	strh	r1, [r0, #12]
 80064ca:	6643      	str	r3, [r0, #100]	; 0x64
 80064cc:	81c2      	strh	r2, [r0, #14]
 80064ce:	6183      	str	r3, [r0, #24]
 80064d0:	4619      	mov	r1, r3
 80064d2:	2208      	movs	r2, #8
 80064d4:	305c      	adds	r0, #92	; 0x5c
 80064d6:	f7ff fdd7 	bl	8006088 <memset>
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <std+0x38>)
 80064dc:	6263      	str	r3, [r4, #36]	; 0x24
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <std+0x3c>)
 80064e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <std+0x40>)
 80064e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <std+0x44>)
 80064e8:	6224      	str	r4, [r4, #32]
 80064ea:	6323      	str	r3, [r4, #48]	; 0x30
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	bf00      	nop
 80064f0:	08006f31 	.word	0x08006f31
 80064f4:	08006f53 	.word	0x08006f53
 80064f8:	08006f8b 	.word	0x08006f8b
 80064fc:	08006faf 	.word	0x08006faf

08006500 <_cleanup_r>:
 8006500:	4901      	ldr	r1, [pc, #4]	; (8006508 <_cleanup_r+0x8>)
 8006502:	f000 b8af 	b.w	8006664 <_fwalk_reent>
 8006506:	bf00      	nop
 8006508:	08006441 	.word	0x08006441

0800650c <__sfmoreglue>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	2268      	movs	r2, #104	; 0x68
 8006510:	1e4d      	subs	r5, r1, #1
 8006512:	4355      	muls	r5, r2
 8006514:	460e      	mov	r6, r1
 8006516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800651a:	f000 f997 	bl	800684c <_malloc_r>
 800651e:	4604      	mov	r4, r0
 8006520:	b140      	cbz	r0, 8006534 <__sfmoreglue+0x28>
 8006522:	2100      	movs	r1, #0
 8006524:	e9c0 1600 	strd	r1, r6, [r0]
 8006528:	300c      	adds	r0, #12
 800652a:	60a0      	str	r0, [r4, #8]
 800652c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006530:	f7ff fdaa 	bl	8006088 <memset>
 8006534:	4620      	mov	r0, r4
 8006536:	bd70      	pop	{r4, r5, r6, pc}

08006538 <__sfp_lock_acquire>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__sfp_lock_acquire+0x8>)
 800653a:	f000 b8b3 	b.w	80066a4 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	20000afd 	.word	0x20000afd

08006544 <__sfp_lock_release>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__sfp_lock_release+0x8>)
 8006546:	f000 b8ae 	b.w	80066a6 <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	20000afd 	.word	0x20000afd

08006550 <__sinit_lock_acquire>:
 8006550:	4801      	ldr	r0, [pc, #4]	; (8006558 <__sinit_lock_acquire+0x8>)
 8006552:	f000 b8a7 	b.w	80066a4 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	20000afe 	.word	0x20000afe

0800655c <__sinit_lock_release>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__sinit_lock_release+0x8>)
 800655e:	f000 b8a2 	b.w	80066a6 <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	20000afe 	.word	0x20000afe

08006568 <__sinit>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4604      	mov	r4, r0
 800656c:	f7ff fff0 	bl	8006550 <__sinit_lock_acquire>
 8006570:	69a3      	ldr	r3, [r4, #24]
 8006572:	b11b      	cbz	r3, 800657c <__sinit+0x14>
 8006574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006578:	f7ff bff0 	b.w	800655c <__sinit_lock_release>
 800657c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006580:	6523      	str	r3, [r4, #80]	; 0x50
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <__sinit+0x68>)
 8006584:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <__sinit+0x6c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	62a2      	str	r2, [r4, #40]	; 0x28
 800658a:	42a3      	cmp	r3, r4
 800658c:	bf04      	itt	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	61a3      	streq	r3, [r4, #24]
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f820 	bl	80065d8 <__sfp>
 8006598:	6060      	str	r0, [r4, #4]
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f81c 	bl	80065d8 <__sfp>
 80065a0:	60a0      	str	r0, [r4, #8]
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 f818 	bl	80065d8 <__sfp>
 80065a8:	2200      	movs	r2, #0
 80065aa:	60e0      	str	r0, [r4, #12]
 80065ac:	2104      	movs	r1, #4
 80065ae:	6860      	ldr	r0, [r4, #4]
 80065b0:	f7ff ff82 	bl	80064b8 <std>
 80065b4:	68a0      	ldr	r0, [r4, #8]
 80065b6:	2201      	movs	r2, #1
 80065b8:	2109      	movs	r1, #9
 80065ba:	f7ff ff7d 	bl	80064b8 <std>
 80065be:	68e0      	ldr	r0, [r4, #12]
 80065c0:	2202      	movs	r2, #2
 80065c2:	2112      	movs	r1, #18
 80065c4:	f7ff ff78 	bl	80064b8 <std>
 80065c8:	2301      	movs	r3, #1
 80065ca:	61a3      	str	r3, [r4, #24]
 80065cc:	e7d2      	b.n	8006574 <__sinit+0xc>
 80065ce:	bf00      	nop
 80065d0:	080071b8 	.word	0x080071b8
 80065d4:	08006501 	.word	0x08006501

080065d8 <__sfp>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	4607      	mov	r7, r0
 80065dc:	f7ff ffac 	bl	8006538 <__sfp_lock_acquire>
 80065e0:	4b1e      	ldr	r3, [pc, #120]	; (800665c <__sfp+0x84>)
 80065e2:	681e      	ldr	r6, [r3, #0]
 80065e4:	69b3      	ldr	r3, [r6, #24]
 80065e6:	b913      	cbnz	r3, 80065ee <__sfp+0x16>
 80065e8:	4630      	mov	r0, r6
 80065ea:	f7ff ffbd 	bl	8006568 <__sinit>
 80065ee:	3648      	adds	r6, #72	; 0x48
 80065f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	d503      	bpl.n	8006600 <__sfp+0x28>
 80065f8:	6833      	ldr	r3, [r6, #0]
 80065fa:	b30b      	cbz	r3, 8006640 <__sfp+0x68>
 80065fc:	6836      	ldr	r6, [r6, #0]
 80065fe:	e7f7      	b.n	80065f0 <__sfp+0x18>
 8006600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006604:	b9d5      	cbnz	r5, 800663c <__sfp+0x64>
 8006606:	4b16      	ldr	r3, [pc, #88]	; (8006660 <__sfp+0x88>)
 8006608:	60e3      	str	r3, [r4, #12]
 800660a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800660e:	6665      	str	r5, [r4, #100]	; 0x64
 8006610:	f000 f847 	bl	80066a2 <__retarget_lock_init_recursive>
 8006614:	f7ff ff96 	bl	8006544 <__sfp_lock_release>
 8006618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800661c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006620:	6025      	str	r5, [r4, #0]
 8006622:	61a5      	str	r5, [r4, #24]
 8006624:	2208      	movs	r2, #8
 8006626:	4629      	mov	r1, r5
 8006628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800662c:	f7ff fd2c 	bl	8006088 <memset>
 8006630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006638:	4620      	mov	r0, r4
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663c:	3468      	adds	r4, #104	; 0x68
 800663e:	e7d9      	b.n	80065f4 <__sfp+0x1c>
 8006640:	2104      	movs	r1, #4
 8006642:	4638      	mov	r0, r7
 8006644:	f7ff ff62 	bl	800650c <__sfmoreglue>
 8006648:	4604      	mov	r4, r0
 800664a:	6030      	str	r0, [r6, #0]
 800664c:	2800      	cmp	r0, #0
 800664e:	d1d5      	bne.n	80065fc <__sfp+0x24>
 8006650:	f7ff ff78 	bl	8006544 <__sfp_lock_release>
 8006654:	230c      	movs	r3, #12
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	e7ee      	b.n	8006638 <__sfp+0x60>
 800665a:	bf00      	nop
 800665c:	080071b8 	.word	0x080071b8
 8006660:	ffff0001 	.word	0xffff0001

08006664 <_fwalk_reent>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	4606      	mov	r6, r0
 800666a:	4688      	mov	r8, r1
 800666c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006670:	2700      	movs	r7, #0
 8006672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006676:	f1b9 0901 	subs.w	r9, r9, #1
 800667a:	d505      	bpl.n	8006688 <_fwalk_reent+0x24>
 800667c:	6824      	ldr	r4, [r4, #0]
 800667e:	2c00      	cmp	r4, #0
 8006680:	d1f7      	bne.n	8006672 <_fwalk_reent+0xe>
 8006682:	4638      	mov	r0, r7
 8006684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006688:	89ab      	ldrh	r3, [r5, #12]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d907      	bls.n	800669e <_fwalk_reent+0x3a>
 800668e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006692:	3301      	adds	r3, #1
 8006694:	d003      	beq.n	800669e <_fwalk_reent+0x3a>
 8006696:	4629      	mov	r1, r5
 8006698:	4630      	mov	r0, r6
 800669a:	47c0      	blx	r8
 800669c:	4307      	orrs	r7, r0
 800669e:	3568      	adds	r5, #104	; 0x68
 80066a0:	e7e9      	b.n	8006676 <_fwalk_reent+0x12>

080066a2 <__retarget_lock_init_recursive>:
 80066a2:	4770      	bx	lr

080066a4 <__retarget_lock_acquire_recursive>:
 80066a4:	4770      	bx	lr

080066a6 <__retarget_lock_release_recursive>:
 80066a6:	4770      	bx	lr

080066a8 <__swhatbuf_r>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	460e      	mov	r6, r1
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	b096      	sub	sp, #88	; 0x58
 80066b4:	4614      	mov	r4, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	da08      	bge.n	80066cc <__swhatbuf_r+0x24>
 80066ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	061a      	lsls	r2, r3, #24
 80066c4:	d410      	bmi.n	80066e8 <__swhatbuf_r+0x40>
 80066c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ca:	e00e      	b.n	80066ea <__swhatbuf_r+0x42>
 80066cc:	466a      	mov	r2, sp
 80066ce:	f000 fc95 	bl	8006ffc <_fstat_r>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	dbf1      	blt.n	80066ba <__swhatbuf_r+0x12>
 80066d6:	9a01      	ldr	r2, [sp, #4]
 80066d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066e0:	425a      	negs	r2, r3
 80066e2:	415a      	adcs	r2, r3
 80066e4:	602a      	str	r2, [r5, #0]
 80066e6:	e7ee      	b.n	80066c6 <__swhatbuf_r+0x1e>
 80066e8:	2340      	movs	r3, #64	; 0x40
 80066ea:	2000      	movs	r0, #0
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	b016      	add	sp, #88	; 0x58
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080066f4 <__smakebuf_r>:
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f8:	079d      	lsls	r5, r3, #30
 80066fa:	4606      	mov	r6, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	d507      	bpl.n	8006710 <__smakebuf_r+0x1c>
 8006700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	2301      	movs	r3, #1
 800670a:	6163      	str	r3, [r4, #20]
 800670c:	b002      	add	sp, #8
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	ab01      	add	r3, sp, #4
 8006712:	466a      	mov	r2, sp
 8006714:	f7ff ffc8 	bl	80066a8 <__swhatbuf_r>
 8006718:	9900      	ldr	r1, [sp, #0]
 800671a:	4605      	mov	r5, r0
 800671c:	4630      	mov	r0, r6
 800671e:	f000 f895 	bl	800684c <_malloc_r>
 8006722:	b948      	cbnz	r0, 8006738 <__smakebuf_r+0x44>
 8006724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006728:	059a      	lsls	r2, r3, #22
 800672a:	d4ef      	bmi.n	800670c <__smakebuf_r+0x18>
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	e7e3      	b.n	8006700 <__smakebuf_r+0xc>
 8006738:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <__smakebuf_r+0x7c>)
 800673a:	62b3      	str	r3, [r6, #40]	; 0x28
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	6020      	str	r0, [r4, #0]
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	6163      	str	r3, [r4, #20]
 800674a:	9b01      	ldr	r3, [sp, #4]
 800674c:	6120      	str	r0, [r4, #16]
 800674e:	b15b      	cbz	r3, 8006768 <__smakebuf_r+0x74>
 8006750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006754:	4630      	mov	r0, r6
 8006756:	f000 fc63 	bl	8007020 <_isatty_r>
 800675a:	b128      	cbz	r0, 8006768 <__smakebuf_r+0x74>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	89a0      	ldrh	r0, [r4, #12]
 800676a:	4305      	orrs	r5, r0
 800676c:	81a5      	strh	r5, [r4, #12]
 800676e:	e7cd      	b.n	800670c <__smakebuf_r+0x18>
 8006770:	08006501 	.word	0x08006501

08006774 <_free_r>:
 8006774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006776:	2900      	cmp	r1, #0
 8006778:	d044      	beq.n	8006804 <_free_r+0x90>
 800677a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800677e:	9001      	str	r0, [sp, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f1a1 0404 	sub.w	r4, r1, #4
 8006786:	bfb8      	it	lt
 8006788:	18e4      	addlt	r4, r4, r3
 800678a:	f000 fc6b 	bl	8007064 <__malloc_lock>
 800678e:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <_free_r+0x94>)
 8006790:	9801      	ldr	r0, [sp, #4]
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	b933      	cbnz	r3, 80067a4 <_free_r+0x30>
 8006796:	6063      	str	r3, [r4, #4]
 8006798:	6014      	str	r4, [r2, #0]
 800679a:	b003      	add	sp, #12
 800679c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067a0:	f000 bc66 	b.w	8007070 <__malloc_unlock>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d908      	bls.n	80067ba <_free_r+0x46>
 80067a8:	6825      	ldr	r5, [r4, #0]
 80067aa:	1961      	adds	r1, r4, r5
 80067ac:	428b      	cmp	r3, r1
 80067ae:	bf01      	itttt	eq
 80067b0:	6819      	ldreq	r1, [r3, #0]
 80067b2:	685b      	ldreq	r3, [r3, #4]
 80067b4:	1949      	addeq	r1, r1, r5
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	e7ed      	b.n	8006796 <_free_r+0x22>
 80067ba:	461a      	mov	r2, r3
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b10b      	cbz	r3, 80067c4 <_free_r+0x50>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d9fa      	bls.n	80067ba <_free_r+0x46>
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	1855      	adds	r5, r2, r1
 80067c8:	42a5      	cmp	r5, r4
 80067ca:	d10b      	bne.n	80067e4 <_free_r+0x70>
 80067cc:	6824      	ldr	r4, [r4, #0]
 80067ce:	4421      	add	r1, r4
 80067d0:	1854      	adds	r4, r2, r1
 80067d2:	42a3      	cmp	r3, r4
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	d1e0      	bne.n	800679a <_free_r+0x26>
 80067d8:	681c      	ldr	r4, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	6053      	str	r3, [r2, #4]
 80067de:	4421      	add	r1, r4
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	e7da      	b.n	800679a <_free_r+0x26>
 80067e4:	d902      	bls.n	80067ec <_free_r+0x78>
 80067e6:	230c      	movs	r3, #12
 80067e8:	6003      	str	r3, [r0, #0]
 80067ea:	e7d6      	b.n	800679a <_free_r+0x26>
 80067ec:	6825      	ldr	r5, [r4, #0]
 80067ee:	1961      	adds	r1, r4, r5
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf04      	itt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	bf04      	itt	eq
 80067fc:	1949      	addeq	r1, r1, r5
 80067fe:	6021      	streq	r1, [r4, #0]
 8006800:	6054      	str	r4, [r2, #4]
 8006802:	e7ca      	b.n	800679a <_free_r+0x26>
 8006804:	b003      	add	sp, #12
 8006806:	bd30      	pop	{r4, r5, pc}
 8006808:	20000b00 	.word	0x20000b00

0800680c <sbrk_aligned>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4e0e      	ldr	r6, [pc, #56]	; (8006848 <sbrk_aligned+0x3c>)
 8006810:	460c      	mov	r4, r1
 8006812:	6831      	ldr	r1, [r6, #0]
 8006814:	4605      	mov	r5, r0
 8006816:	b911      	cbnz	r1, 800681e <sbrk_aligned+0x12>
 8006818:	f000 fb7a 	bl	8006f10 <_sbrk_r>
 800681c:	6030      	str	r0, [r6, #0]
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 fb75 	bl	8006f10 <_sbrk_r>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	d00a      	beq.n	8006840 <sbrk_aligned+0x34>
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d007      	beq.n	8006844 <sbrk_aligned+0x38>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fb6a 	bl	8006f10 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d101      	bne.n	8006844 <sbrk_aligned+0x38>
 8006840:	f04f 34ff 	mov.w	r4, #4294967295
 8006844:	4620      	mov	r0, r4
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	20000b04 	.word	0x20000b04

0800684c <_malloc_r>:
 800684c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006850:	1ccd      	adds	r5, r1, #3
 8006852:	f025 0503 	bic.w	r5, r5, #3
 8006856:	3508      	adds	r5, #8
 8006858:	2d0c      	cmp	r5, #12
 800685a:	bf38      	it	cc
 800685c:	250c      	movcc	r5, #12
 800685e:	2d00      	cmp	r5, #0
 8006860:	4607      	mov	r7, r0
 8006862:	db01      	blt.n	8006868 <_malloc_r+0x1c>
 8006864:	42a9      	cmp	r1, r5
 8006866:	d905      	bls.n	8006874 <_malloc_r+0x28>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	2600      	movs	r6, #0
 800686e:	4630      	mov	r0, r6
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	4e2e      	ldr	r6, [pc, #184]	; (8006930 <_malloc_r+0xe4>)
 8006876:	f000 fbf5 	bl	8007064 <__malloc_lock>
 800687a:	6833      	ldr	r3, [r6, #0]
 800687c:	461c      	mov	r4, r3
 800687e:	bb34      	cbnz	r4, 80068ce <_malloc_r+0x82>
 8006880:	4629      	mov	r1, r5
 8006882:	4638      	mov	r0, r7
 8006884:	f7ff ffc2 	bl	800680c <sbrk_aligned>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	4604      	mov	r4, r0
 800688c:	d14d      	bne.n	800692a <_malloc_r+0xde>
 800688e:	6834      	ldr	r4, [r6, #0]
 8006890:	4626      	mov	r6, r4
 8006892:	2e00      	cmp	r6, #0
 8006894:	d140      	bne.n	8006918 <_malloc_r+0xcc>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	4631      	mov	r1, r6
 800689a:	4638      	mov	r0, r7
 800689c:	eb04 0803 	add.w	r8, r4, r3
 80068a0:	f000 fb36 	bl	8006f10 <_sbrk_r>
 80068a4:	4580      	cmp	r8, r0
 80068a6:	d13a      	bne.n	800691e <_malloc_r+0xd2>
 80068a8:	6821      	ldr	r1, [r4, #0]
 80068aa:	3503      	adds	r5, #3
 80068ac:	1a6d      	subs	r5, r5, r1
 80068ae:	f025 0503 	bic.w	r5, r5, #3
 80068b2:	3508      	adds	r5, #8
 80068b4:	2d0c      	cmp	r5, #12
 80068b6:	bf38      	it	cc
 80068b8:	250c      	movcc	r5, #12
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ffa5 	bl	800680c <sbrk_aligned>
 80068c2:	3001      	adds	r0, #1
 80068c4:	d02b      	beq.n	800691e <_malloc_r+0xd2>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	442b      	add	r3, r5
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	e00e      	b.n	80068ec <_malloc_r+0xa0>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	1b52      	subs	r2, r2, r5
 80068d2:	d41e      	bmi.n	8006912 <_malloc_r+0xc6>
 80068d4:	2a0b      	cmp	r2, #11
 80068d6:	d916      	bls.n	8006906 <_malloc_r+0xba>
 80068d8:	1961      	adds	r1, r4, r5
 80068da:	42a3      	cmp	r3, r4
 80068dc:	6025      	str	r5, [r4, #0]
 80068de:	bf18      	it	ne
 80068e0:	6059      	strne	r1, [r3, #4]
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	bf08      	it	eq
 80068e6:	6031      	streq	r1, [r6, #0]
 80068e8:	5162      	str	r2, [r4, r5]
 80068ea:	604b      	str	r3, [r1, #4]
 80068ec:	4638      	mov	r0, r7
 80068ee:	f104 060b 	add.w	r6, r4, #11
 80068f2:	f000 fbbd 	bl	8007070 <__malloc_unlock>
 80068f6:	f026 0607 	bic.w	r6, r6, #7
 80068fa:	1d23      	adds	r3, r4, #4
 80068fc:	1af2      	subs	r2, r6, r3
 80068fe:	d0b6      	beq.n	800686e <_malloc_r+0x22>
 8006900:	1b9b      	subs	r3, r3, r6
 8006902:	50a3      	str	r3, [r4, r2]
 8006904:	e7b3      	b.n	800686e <_malloc_r+0x22>
 8006906:	6862      	ldr	r2, [r4, #4]
 8006908:	42a3      	cmp	r3, r4
 800690a:	bf0c      	ite	eq
 800690c:	6032      	streq	r2, [r6, #0]
 800690e:	605a      	strne	r2, [r3, #4]
 8006910:	e7ec      	b.n	80068ec <_malloc_r+0xa0>
 8006912:	4623      	mov	r3, r4
 8006914:	6864      	ldr	r4, [r4, #4]
 8006916:	e7b2      	b.n	800687e <_malloc_r+0x32>
 8006918:	4634      	mov	r4, r6
 800691a:	6876      	ldr	r6, [r6, #4]
 800691c:	e7b9      	b.n	8006892 <_malloc_r+0x46>
 800691e:	230c      	movs	r3, #12
 8006920:	603b      	str	r3, [r7, #0]
 8006922:	4638      	mov	r0, r7
 8006924:	f000 fba4 	bl	8007070 <__malloc_unlock>
 8006928:	e7a1      	b.n	800686e <_malloc_r+0x22>
 800692a:	6025      	str	r5, [r4, #0]
 800692c:	e7de      	b.n	80068ec <_malloc_r+0xa0>
 800692e:	bf00      	nop
 8006930:	20000b00 	.word	0x20000b00

08006934 <__sfputc_r>:
 8006934:	6893      	ldr	r3, [r2, #8]
 8006936:	3b01      	subs	r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	b410      	push	{r4}
 800693c:	6093      	str	r3, [r2, #8]
 800693e:	da08      	bge.n	8006952 <__sfputc_r+0x1e>
 8006940:	6994      	ldr	r4, [r2, #24]
 8006942:	42a3      	cmp	r3, r4
 8006944:	db01      	blt.n	800694a <__sfputc_r+0x16>
 8006946:	290a      	cmp	r1, #10
 8006948:	d103      	bne.n	8006952 <__sfputc_r+0x1e>
 800694a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800694e:	f7ff bc31 	b.w	80061b4 <__swbuf_r>
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	1c58      	adds	r0, r3, #1
 8006956:	6010      	str	r0, [r2, #0]
 8006958:	7019      	strb	r1, [r3, #0]
 800695a:	4608      	mov	r0, r1
 800695c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006960:	4770      	bx	lr

08006962 <__sfputs_r>:
 8006962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	4614      	mov	r4, r2
 800696a:	18d5      	adds	r5, r2, r3
 800696c:	42ac      	cmp	r4, r5
 800696e:	d101      	bne.n	8006974 <__sfputs_r+0x12>
 8006970:	2000      	movs	r0, #0
 8006972:	e007      	b.n	8006984 <__sfputs_r+0x22>
 8006974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006978:	463a      	mov	r2, r7
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ffda 	bl	8006934 <__sfputc_r>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d1f3      	bne.n	800696c <__sfputs_r+0xa>
 8006984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006988 <_vfiprintf_r>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	460d      	mov	r5, r1
 800698e:	b09d      	sub	sp, #116	; 0x74
 8006990:	4614      	mov	r4, r2
 8006992:	4698      	mov	r8, r3
 8006994:	4606      	mov	r6, r0
 8006996:	b118      	cbz	r0, 80069a0 <_vfiprintf_r+0x18>
 8006998:	6983      	ldr	r3, [r0, #24]
 800699a:	b90b      	cbnz	r3, 80069a0 <_vfiprintf_r+0x18>
 800699c:	f7ff fde4 	bl	8006568 <__sinit>
 80069a0:	4b89      	ldr	r3, [pc, #548]	; (8006bc8 <_vfiprintf_r+0x240>)
 80069a2:	429d      	cmp	r5, r3
 80069a4:	d11b      	bne.n	80069de <_vfiprintf_r+0x56>
 80069a6:	6875      	ldr	r5, [r6, #4]
 80069a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d405      	bmi.n	80069ba <_vfiprintf_r+0x32>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	059a      	lsls	r2, r3, #22
 80069b2:	d402      	bmi.n	80069ba <_vfiprintf_r+0x32>
 80069b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b6:	f7ff fe75 	bl	80066a4 <__retarget_lock_acquire_recursive>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	071b      	lsls	r3, r3, #28
 80069be:	d501      	bpl.n	80069c4 <_vfiprintf_r+0x3c>
 80069c0:	692b      	ldr	r3, [r5, #16]
 80069c2:	b9eb      	cbnz	r3, 8006a00 <_vfiprintf_r+0x78>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff fc46 	bl	8006258 <__swsetup_r>
 80069cc:	b1c0      	cbz	r0, 8006a00 <_vfiprintf_r+0x78>
 80069ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d0:	07dc      	lsls	r4, r3, #31
 80069d2:	d50e      	bpl.n	80069f2 <_vfiprintf_r+0x6a>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	b01d      	add	sp, #116	; 0x74
 80069da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069de:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <_vfiprintf_r+0x244>)
 80069e0:	429d      	cmp	r5, r3
 80069e2:	d101      	bne.n	80069e8 <_vfiprintf_r+0x60>
 80069e4:	68b5      	ldr	r5, [r6, #8]
 80069e6:	e7df      	b.n	80069a8 <_vfiprintf_r+0x20>
 80069e8:	4b79      	ldr	r3, [pc, #484]	; (8006bd0 <_vfiprintf_r+0x248>)
 80069ea:	429d      	cmp	r5, r3
 80069ec:	bf08      	it	eq
 80069ee:	68f5      	ldreq	r5, [r6, #12]
 80069f0:	e7da      	b.n	80069a8 <_vfiprintf_r+0x20>
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	0598      	lsls	r0, r3, #22
 80069f6:	d4ed      	bmi.n	80069d4 <_vfiprintf_r+0x4c>
 80069f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fa:	f7ff fe54 	bl	80066a6 <__retarget_lock_release_recursive>
 80069fe:	e7e9      	b.n	80069d4 <_vfiprintf_r+0x4c>
 8006a00:	2300      	movs	r3, #0
 8006a02:	9309      	str	r3, [sp, #36]	; 0x24
 8006a04:	2320      	movs	r3, #32
 8006a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a0e:	2330      	movs	r3, #48	; 0x30
 8006a10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bd4 <_vfiprintf_r+0x24c>
 8006a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a18:	f04f 0901 	mov.w	r9, #1
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	469a      	mov	sl, r3
 8006a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a24:	b10a      	cbz	r2, 8006a2a <_vfiprintf_r+0xa2>
 8006a26:	2a25      	cmp	r2, #37	; 0x25
 8006a28:	d1f9      	bne.n	8006a1e <_vfiprintf_r+0x96>
 8006a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a2e:	d00b      	beq.n	8006a48 <_vfiprintf_r+0xc0>
 8006a30:	465b      	mov	r3, fp
 8006a32:	4622      	mov	r2, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7ff ff93 	bl	8006962 <__sfputs_r>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f000 80aa 	beq.w	8006b96 <_vfiprintf_r+0x20e>
 8006a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a44:	445a      	add	r2, fp
 8006a46:	9209      	str	r2, [sp, #36]	; 0x24
 8006a48:	f89a 3000 	ldrb.w	r3, [sl]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80a2 	beq.w	8006b96 <_vfiprintf_r+0x20e>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f04f 32ff 	mov.w	r2, #4294967295
 8006a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a5c:	f10a 0a01 	add.w	sl, sl, #1
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	9307      	str	r3, [sp, #28]
 8006a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a68:	931a      	str	r3, [sp, #104]	; 0x68
 8006a6a:	4654      	mov	r4, sl
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a72:	4858      	ldr	r0, [pc, #352]	; (8006bd4 <_vfiprintf_r+0x24c>)
 8006a74:	f7f9 fbe4 	bl	8000240 <memchr>
 8006a78:	9a04      	ldr	r2, [sp, #16]
 8006a7a:	b9d8      	cbnz	r0, 8006ab4 <_vfiprintf_r+0x12c>
 8006a7c:	06d1      	lsls	r1, r2, #27
 8006a7e:	bf44      	itt	mi
 8006a80:	2320      	movmi	r3, #32
 8006a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a86:	0713      	lsls	r3, r2, #28
 8006a88:	bf44      	itt	mi
 8006a8a:	232b      	movmi	r3, #43	; 0x2b
 8006a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a90:	f89a 3000 	ldrb.w	r3, [sl]
 8006a94:	2b2a      	cmp	r3, #42	; 0x2a
 8006a96:	d015      	beq.n	8006ac4 <_vfiprintf_r+0x13c>
 8006a98:	9a07      	ldr	r2, [sp, #28]
 8006a9a:	4654      	mov	r4, sl
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f04f 0c0a 	mov.w	ip, #10
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa8:	3b30      	subs	r3, #48	; 0x30
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d94e      	bls.n	8006b4c <_vfiprintf_r+0x1c4>
 8006aae:	b1b0      	cbz	r0, 8006ade <_vfiprintf_r+0x156>
 8006ab0:	9207      	str	r2, [sp, #28]
 8006ab2:	e014      	b.n	8006ade <_vfiprintf_r+0x156>
 8006ab4:	eba0 0308 	sub.w	r3, r0, r8
 8006ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8006abc:	4313      	orrs	r3, r2
 8006abe:	9304      	str	r3, [sp, #16]
 8006ac0:	46a2      	mov	sl, r4
 8006ac2:	e7d2      	b.n	8006a6a <_vfiprintf_r+0xe2>
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	1d19      	adds	r1, r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	9103      	str	r1, [sp, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bfbb      	ittet	lt
 8006ad0:	425b      	neglt	r3, r3
 8006ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad6:	9307      	strge	r3, [sp, #28]
 8006ad8:	9307      	strlt	r3, [sp, #28]
 8006ada:	bfb8      	it	lt
 8006adc:	9204      	strlt	r2, [sp, #16]
 8006ade:	7823      	ldrb	r3, [r4, #0]
 8006ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae2:	d10c      	bne.n	8006afe <_vfiprintf_r+0x176>
 8006ae4:	7863      	ldrb	r3, [r4, #1]
 8006ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae8:	d135      	bne.n	8006b56 <_vfiprintf_r+0x1ce>
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	1d1a      	adds	r2, r3, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	9203      	str	r2, [sp, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfb8      	it	lt
 8006af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006afa:	3402      	adds	r4, #2
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006be4 <_vfiprintf_r+0x25c>
 8006b02:	7821      	ldrb	r1, [r4, #0]
 8006b04:	2203      	movs	r2, #3
 8006b06:	4650      	mov	r0, sl
 8006b08:	f7f9 fb9a 	bl	8000240 <memchr>
 8006b0c:	b140      	cbz	r0, 8006b20 <_vfiprintf_r+0x198>
 8006b0e:	2340      	movs	r3, #64	; 0x40
 8006b10:	eba0 000a 	sub.w	r0, r0, sl
 8006b14:	fa03 f000 	lsl.w	r0, r3, r0
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	4303      	orrs	r3, r0
 8006b1c:	3401      	adds	r4, #1
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b24:	482c      	ldr	r0, [pc, #176]	; (8006bd8 <_vfiprintf_r+0x250>)
 8006b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b2a:	2206      	movs	r2, #6
 8006b2c:	f7f9 fb88 	bl	8000240 <memchr>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d03f      	beq.n	8006bb4 <_vfiprintf_r+0x22c>
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <_vfiprintf_r+0x254>)
 8006b36:	bb1b      	cbnz	r3, 8006b80 <_vfiprintf_r+0x1f8>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	3307      	adds	r3, #7
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	9303      	str	r3, [sp, #12]
 8006b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b46:	443b      	add	r3, r7
 8006b48:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4a:	e767      	b.n	8006a1c <_vfiprintf_r+0x94>
 8006b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b50:	460c      	mov	r4, r1
 8006b52:	2001      	movs	r0, #1
 8006b54:	e7a5      	b.n	8006aa2 <_vfiprintf_r+0x11a>
 8006b56:	2300      	movs	r3, #0
 8006b58:	3401      	adds	r4, #1
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f04f 0c0a 	mov.w	ip, #10
 8006b62:	4620      	mov	r0, r4
 8006b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b68:	3a30      	subs	r2, #48	; 0x30
 8006b6a:	2a09      	cmp	r2, #9
 8006b6c:	d903      	bls.n	8006b76 <_vfiprintf_r+0x1ee>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c5      	beq.n	8006afe <_vfiprintf_r+0x176>
 8006b72:	9105      	str	r1, [sp, #20]
 8006b74:	e7c3      	b.n	8006afe <_vfiprintf_r+0x176>
 8006b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e7f0      	b.n	8006b62 <_vfiprintf_r+0x1da>
 8006b80:	ab03      	add	r3, sp, #12
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	462a      	mov	r2, r5
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <_vfiprintf_r+0x258>)
 8006b88:	a904      	add	r1, sp, #16
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f3af 8000 	nop.w
 8006b90:	4607      	mov	r7, r0
 8006b92:	1c78      	adds	r0, r7, #1
 8006b94:	d1d6      	bne.n	8006b44 <_vfiprintf_r+0x1bc>
 8006b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b98:	07d9      	lsls	r1, r3, #31
 8006b9a:	d405      	bmi.n	8006ba8 <_vfiprintf_r+0x220>
 8006b9c:	89ab      	ldrh	r3, [r5, #12]
 8006b9e:	059a      	lsls	r2, r3, #22
 8006ba0:	d402      	bmi.n	8006ba8 <_vfiprintf_r+0x220>
 8006ba2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ba4:	f7ff fd7f 	bl	80066a6 <__retarget_lock_release_recursive>
 8006ba8:	89ab      	ldrh	r3, [r5, #12]
 8006baa:	065b      	lsls	r3, r3, #25
 8006bac:	f53f af12 	bmi.w	80069d4 <_vfiprintf_r+0x4c>
 8006bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bb2:	e711      	b.n	80069d8 <_vfiprintf_r+0x50>
 8006bb4:	ab03      	add	r3, sp, #12
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	462a      	mov	r2, r5
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <_vfiprintf_r+0x258>)
 8006bbc:	a904      	add	r1, sp, #16
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f880 	bl	8006cc4 <_printf_i>
 8006bc4:	e7e4      	b.n	8006b90 <_vfiprintf_r+0x208>
 8006bc6:	bf00      	nop
 8006bc8:	080071dc 	.word	0x080071dc
 8006bcc:	080071fc 	.word	0x080071fc
 8006bd0:	080071bc 	.word	0x080071bc
 8006bd4:	0800721c 	.word	0x0800721c
 8006bd8:	08007226 	.word	0x08007226
 8006bdc:	00000000 	.word	0x00000000
 8006be0:	08006963 	.word	0x08006963
 8006be4:	08007222 	.word	0x08007222

08006be8 <_printf_common>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	4616      	mov	r6, r2
 8006bee:	4699      	mov	r9, r3
 8006bf0:	688a      	ldr	r2, [r1, #8]
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	bfb8      	it	lt
 8006bfc:	4613      	movlt	r3, r2
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c04:	4607      	mov	r7, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b10a      	cbz	r2, 8006c0e <_printf_common+0x26>
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	6033      	str	r3, [r6, #0]
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	0699      	lsls	r1, r3, #26
 8006c12:	bf42      	ittt	mi
 8006c14:	6833      	ldrmi	r3, [r6, #0]
 8006c16:	3302      	addmi	r3, #2
 8006c18:	6033      	strmi	r3, [r6, #0]
 8006c1a:	6825      	ldr	r5, [r4, #0]
 8006c1c:	f015 0506 	ands.w	r5, r5, #6
 8006c20:	d106      	bne.n	8006c30 <_printf_common+0x48>
 8006c22:	f104 0a19 	add.w	sl, r4, #25
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	6832      	ldr	r2, [r6, #0]
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	42ab      	cmp	r3, r5
 8006c2e:	dc26      	bgt.n	8006c7e <_printf_common+0x96>
 8006c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c34:	1e13      	subs	r3, r2, #0
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	bf18      	it	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	0692      	lsls	r2, r2, #26
 8006c3e:	d42b      	bmi.n	8006c98 <_printf_common+0xb0>
 8006c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c44:	4649      	mov	r1, r9
 8006c46:	4638      	mov	r0, r7
 8006c48:	47c0      	blx	r8
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d01e      	beq.n	8006c8c <_printf_common+0xa4>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	68e5      	ldr	r5, [r4, #12]
 8006c52:	6832      	ldr	r2, [r6, #0]
 8006c54:	f003 0306 	and.w	r3, r3, #6
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	bf08      	it	eq
 8006c5c:	1aad      	subeq	r5, r5, r2
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	6922      	ldr	r2, [r4, #16]
 8006c62:	bf0c      	ite	eq
 8006c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c68:	2500      	movne	r5, #0
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bfc4      	itt	gt
 8006c6e:	1a9b      	subgt	r3, r3, r2
 8006c70:	18ed      	addgt	r5, r5, r3
 8006c72:	2600      	movs	r6, #0
 8006c74:	341a      	adds	r4, #26
 8006c76:	42b5      	cmp	r5, r6
 8006c78:	d11a      	bne.n	8006cb0 <_printf_common+0xc8>
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	e008      	b.n	8006c90 <_printf_common+0xa8>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4652      	mov	r2, sl
 8006c82:	4649      	mov	r1, r9
 8006c84:	4638      	mov	r0, r7
 8006c86:	47c0      	blx	r8
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d103      	bne.n	8006c94 <_printf_common+0xac>
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	3501      	adds	r5, #1
 8006c96:	e7c6      	b.n	8006c26 <_printf_common+0x3e>
 8006c98:	18e1      	adds	r1, r4, r3
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	2030      	movs	r0, #48	; 0x30
 8006c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ca2:	4422      	add	r2, r4
 8006ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cac:	3302      	adds	r3, #2
 8006cae:	e7c7      	b.n	8006c40 <_printf_common+0x58>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d0e6      	beq.n	8006c8c <_printf_common+0xa4>
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	e7d9      	b.n	8006c76 <_printf_common+0x8e>
	...

08006cc4 <_printf_i>:
 8006cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	7e0f      	ldrb	r7, [r1, #24]
 8006cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ccc:	2f78      	cmp	r7, #120	; 0x78
 8006cce:	4691      	mov	r9, r2
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cda:	d807      	bhi.n	8006cec <_printf_i+0x28>
 8006cdc:	2f62      	cmp	r7, #98	; 0x62
 8006cde:	d80a      	bhi.n	8006cf6 <_printf_i+0x32>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	f000 80d8 	beq.w	8006e96 <_printf_i+0x1d2>
 8006ce6:	2f58      	cmp	r7, #88	; 0x58
 8006ce8:	f000 80a3 	beq.w	8006e32 <_printf_i+0x16e>
 8006cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cf4:	e03a      	b.n	8006d6c <_printf_i+0xa8>
 8006cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cfa:	2b15      	cmp	r3, #21
 8006cfc:	d8f6      	bhi.n	8006cec <_printf_i+0x28>
 8006cfe:	a101      	add	r1, pc, #4	; (adr r1, 8006d04 <_printf_i+0x40>)
 8006d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d04:	08006d5d 	.word	0x08006d5d
 8006d08:	08006d71 	.word	0x08006d71
 8006d0c:	08006ced 	.word	0x08006ced
 8006d10:	08006ced 	.word	0x08006ced
 8006d14:	08006ced 	.word	0x08006ced
 8006d18:	08006ced 	.word	0x08006ced
 8006d1c:	08006d71 	.word	0x08006d71
 8006d20:	08006ced 	.word	0x08006ced
 8006d24:	08006ced 	.word	0x08006ced
 8006d28:	08006ced 	.word	0x08006ced
 8006d2c:	08006ced 	.word	0x08006ced
 8006d30:	08006e7d 	.word	0x08006e7d
 8006d34:	08006da1 	.word	0x08006da1
 8006d38:	08006e5f 	.word	0x08006e5f
 8006d3c:	08006ced 	.word	0x08006ced
 8006d40:	08006ced 	.word	0x08006ced
 8006d44:	08006e9f 	.word	0x08006e9f
 8006d48:	08006ced 	.word	0x08006ced
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006ced 	.word	0x08006ced
 8006d54:	08006ced 	.word	0x08006ced
 8006d58:	08006e67 	.word	0x08006e67
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	602a      	str	r2, [r5, #0]
 8006d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0a3      	b.n	8006eb8 <_printf_i+0x1f4>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	6829      	ldr	r1, [r5, #0]
 8006d74:	0606      	lsls	r6, r0, #24
 8006d76:	f101 0304 	add.w	r3, r1, #4
 8006d7a:	d50a      	bpl.n	8006d92 <_printf_i+0xce>
 8006d7c:	680e      	ldr	r6, [r1, #0]
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	2e00      	cmp	r6, #0
 8006d82:	da03      	bge.n	8006d8c <_printf_i+0xc8>
 8006d84:	232d      	movs	r3, #45	; 0x2d
 8006d86:	4276      	negs	r6, r6
 8006d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8c:	485e      	ldr	r0, [pc, #376]	; (8006f08 <_printf_i+0x244>)
 8006d8e:	230a      	movs	r3, #10
 8006d90:	e019      	b.n	8006dc6 <_printf_i+0x102>
 8006d92:	680e      	ldr	r6, [r1, #0]
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d9a:	bf18      	it	ne
 8006d9c:	b236      	sxthne	r6, r6
 8006d9e:	e7ef      	b.n	8006d80 <_printf_i+0xbc>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	6820      	ldr	r0, [r4, #0]
 8006da4:	1d19      	adds	r1, r3, #4
 8006da6:	6029      	str	r1, [r5, #0]
 8006da8:	0601      	lsls	r1, r0, #24
 8006daa:	d501      	bpl.n	8006db0 <_printf_i+0xec>
 8006dac:	681e      	ldr	r6, [r3, #0]
 8006dae:	e002      	b.n	8006db6 <_printf_i+0xf2>
 8006db0:	0646      	lsls	r6, r0, #25
 8006db2:	d5fb      	bpl.n	8006dac <_printf_i+0xe8>
 8006db4:	881e      	ldrh	r6, [r3, #0]
 8006db6:	4854      	ldr	r0, [pc, #336]	; (8006f08 <_printf_i+0x244>)
 8006db8:	2f6f      	cmp	r7, #111	; 0x6f
 8006dba:	bf0c      	ite	eq
 8006dbc:	2308      	moveq	r3, #8
 8006dbe:	230a      	movne	r3, #10
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dc6:	6865      	ldr	r5, [r4, #4]
 8006dc8:	60a5      	str	r5, [r4, #8]
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	bfa2      	ittt	ge
 8006dce:	6821      	ldrge	r1, [r4, #0]
 8006dd0:	f021 0104 	bicge.w	r1, r1, #4
 8006dd4:	6021      	strge	r1, [r4, #0]
 8006dd6:	b90e      	cbnz	r6, 8006ddc <_printf_i+0x118>
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	d04d      	beq.n	8006e78 <_printf_i+0x1b4>
 8006ddc:	4615      	mov	r5, r2
 8006dde:	fbb6 f1f3 	udiv	r1, r6, r3
 8006de2:	fb03 6711 	mls	r7, r3, r1, r6
 8006de6:	5dc7      	ldrb	r7, [r0, r7]
 8006de8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dec:	4637      	mov	r7, r6
 8006dee:	42bb      	cmp	r3, r7
 8006df0:	460e      	mov	r6, r1
 8006df2:	d9f4      	bls.n	8006dde <_printf_i+0x11a>
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d10b      	bne.n	8006e10 <_printf_i+0x14c>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	07de      	lsls	r6, r3, #31
 8006dfc:	d508      	bpl.n	8006e10 <_printf_i+0x14c>
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	6861      	ldr	r1, [r4, #4]
 8006e02:	4299      	cmp	r1, r3
 8006e04:	bfde      	ittt	le
 8006e06:	2330      	movle	r3, #48	; 0x30
 8006e08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e10:	1b52      	subs	r2, r2, r5
 8006e12:	6122      	str	r2, [r4, #16]
 8006e14:	f8cd a000 	str.w	sl, [sp]
 8006e18:	464b      	mov	r3, r9
 8006e1a:	aa03      	add	r2, sp, #12
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f7ff fee2 	bl	8006be8 <_printf_common>
 8006e24:	3001      	adds	r0, #1
 8006e26:	d14c      	bne.n	8006ec2 <_printf_i+0x1fe>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	b004      	add	sp, #16
 8006e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e32:	4835      	ldr	r0, [pc, #212]	; (8006f08 <_printf_i+0x244>)
 8006e34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e38:	6829      	ldr	r1, [r5, #0]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e40:	6029      	str	r1, [r5, #0]
 8006e42:	061d      	lsls	r5, r3, #24
 8006e44:	d514      	bpl.n	8006e70 <_printf_i+0x1ac>
 8006e46:	07df      	lsls	r7, r3, #31
 8006e48:	bf44      	itt	mi
 8006e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e4e:	6023      	strmi	r3, [r4, #0]
 8006e50:	b91e      	cbnz	r6, 8006e5a <_printf_i+0x196>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	f023 0320 	bic.w	r3, r3, #32
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	e7b0      	b.n	8006dc0 <_printf_i+0xfc>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	f043 0320 	orr.w	r3, r3, #32
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	2378      	movs	r3, #120	; 0x78
 8006e68:	4828      	ldr	r0, [pc, #160]	; (8006f0c <_printf_i+0x248>)
 8006e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e6e:	e7e3      	b.n	8006e38 <_printf_i+0x174>
 8006e70:	0659      	lsls	r1, r3, #25
 8006e72:	bf48      	it	mi
 8006e74:	b2b6      	uxthmi	r6, r6
 8006e76:	e7e6      	b.n	8006e46 <_printf_i+0x182>
 8006e78:	4615      	mov	r5, r2
 8006e7a:	e7bb      	b.n	8006df4 <_printf_i+0x130>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	6826      	ldr	r6, [r4, #0]
 8006e80:	6961      	ldr	r1, [r4, #20]
 8006e82:	1d18      	adds	r0, r3, #4
 8006e84:	6028      	str	r0, [r5, #0]
 8006e86:	0635      	lsls	r5, r6, #24
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	d501      	bpl.n	8006e90 <_printf_i+0x1cc>
 8006e8c:	6019      	str	r1, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <_printf_i+0x1d2>
 8006e90:	0670      	lsls	r0, r6, #25
 8006e92:	d5fb      	bpl.n	8006e8c <_printf_i+0x1c8>
 8006e94:	8019      	strh	r1, [r3, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	4615      	mov	r5, r2
 8006e9c:	e7ba      	b.n	8006e14 <_printf_i+0x150>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	602a      	str	r2, [r5, #0]
 8006ea4:	681d      	ldr	r5, [r3, #0]
 8006ea6:	6862      	ldr	r2, [r4, #4]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7f9 f9c8 	bl	8000240 <memchr>
 8006eb0:	b108      	cbz	r0, 8006eb6 <_printf_i+0x1f2>
 8006eb2:	1b40      	subs	r0, r0, r5
 8006eb4:	6060      	str	r0, [r4, #4]
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec0:	e7a8      	b.n	8006e14 <_printf_i+0x150>
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	47d0      	blx	sl
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d0ab      	beq.n	8006e28 <_printf_i+0x164>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	079b      	lsls	r3, r3, #30
 8006ed4:	d413      	bmi.n	8006efe <_printf_i+0x23a>
 8006ed6:	68e0      	ldr	r0, [r4, #12]
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	4298      	cmp	r0, r3
 8006edc:	bfb8      	it	lt
 8006ede:	4618      	movlt	r0, r3
 8006ee0:	e7a4      	b.n	8006e2c <_printf_i+0x168>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4640      	mov	r0, r8
 8006eea:	47d0      	blx	sl
 8006eec:	3001      	adds	r0, #1
 8006eee:	d09b      	beq.n	8006e28 <_printf_i+0x164>
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	9903      	ldr	r1, [sp, #12]
 8006ef6:	1a5b      	subs	r3, r3, r1
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dcf2      	bgt.n	8006ee2 <_printf_i+0x21e>
 8006efc:	e7eb      	b.n	8006ed6 <_printf_i+0x212>
 8006efe:	2500      	movs	r5, #0
 8006f00:	f104 0619 	add.w	r6, r4, #25
 8006f04:	e7f5      	b.n	8006ef2 <_printf_i+0x22e>
 8006f06:	bf00      	nop
 8006f08:	0800722d 	.word	0x0800722d
 8006f0c:	0800723e 	.word	0x0800723e

08006f10 <_sbrk_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d06      	ldr	r5, [pc, #24]	; (8006f2c <_sbrk_r+0x1c>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	602b      	str	r3, [r5, #0]
 8006f1c:	f7fa f98a 	bl	8001234 <_sbrk>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_sbrk_r+0x1a>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_sbrk_r+0x1a>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	20000b08 	.word	0x20000b08

08006f30 <__sread>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	460c      	mov	r4, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	f000 f8a0 	bl	800707c <_read_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	bfab      	itete	ge
 8006f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f42:	89a3      	ldrhlt	r3, [r4, #12]
 8006f44:	181b      	addge	r3, r3, r0
 8006f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f4a:	bfac      	ite	ge
 8006f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f4e:	81a3      	strhlt	r3, [r4, #12]
 8006f50:	bd10      	pop	{r4, pc}

08006f52 <__swrite>:
 8006f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	461f      	mov	r7, r3
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	05db      	lsls	r3, r3, #23
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	d505      	bpl.n	8006f70 <__swrite+0x1e>
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f000 f868 	bl	8007040 <_lseek_r>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4628      	mov	r0, r5
 8006f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_write_r>

08006f8a <__sseek>:
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 f855 	bl	8007040 <_lseek_r>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	bf15      	itete	ne
 8006f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fa6:	81a3      	strheq	r3, [r4, #12]
 8006fa8:	bf18      	it	ne
 8006faa:	81a3      	strhne	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__sclose>:
 8006fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb2:	f000 b813 	b.w	8006fdc <_close_r>
	...

08006fb8 <_write_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_write_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fa f8e3 	bl	8001192 <_write>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_write_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_write_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000b08 	.word	0x20000b08

08006fdc <_close_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_close_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa f8ef 	bl	80011ca <_close>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_close_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_close_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000b08 	.word	0x20000b08

08006ffc <_fstat_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_fstat_r+0x20>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fa f8ea 	bl	80011e2 <_fstat>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_fstat_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_fstat_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	20000b08 	.word	0x20000b08

08007020 <_isatty_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_isatty_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fa f8e9 	bl	8001202 <_isatty>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_isatty_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_isatty_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000b08 	.word	0x20000b08

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_lseek_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fa f8e2 	bl	8001218 <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000b08 	.word	0x20000b08

08007064 <__malloc_lock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_lock+0x8>)
 8007066:	f7ff bb1d 	b.w	80066a4 <__retarget_lock_acquire_recursive>
 800706a:	bf00      	nop
 800706c:	20000afc 	.word	0x20000afc

08007070 <__malloc_unlock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_unlock+0x8>)
 8007072:	f7ff bb18 	b.w	80066a6 <__retarget_lock_release_recursive>
 8007076:	bf00      	nop
 8007078:	20000afc 	.word	0x20000afc

0800707c <_read_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	; (800709c <_read_r+0x20>)
 8007080:	4604      	mov	r4, r0
 8007082:	4608      	mov	r0, r1
 8007084:	4611      	mov	r1, r2
 8007086:	2200      	movs	r2, #0
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7fa f864 	bl	8001158 <_read>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_read_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_read_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	20000b08 	.word	0x20000b08

080070a0 <_init>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr

080070ac <_fini>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr
